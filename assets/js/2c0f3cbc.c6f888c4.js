"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[730],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,i(i({ref:t},s),{},{components:n})):r.createElement(h,i({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={},i="Options",c={unversionedId:"user-guide/options",id:"user-guide/options",title:"Options",description:"The behaviour of cavro can be customized throught the Options class.",source:"@site/docs/user-guide/options.md",sourceDirName:"user-guide",slug:"/user-guide/options",permalink:"/docs/user-guide/options",draft:!1,editUrl:"https://github.com/stestagg/cavro/tree/main/doc/docs/user-guide/options.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Logical Types",permalink:"/docs/user-guide/logical-types"},next:{title:"Schema Promotion",permalink:"/docs/user-guide/promotion"}},l={},p=[{value:"Common options",id:"common-options",level:2},{value:"<code>record_encodes_to_dict</code>/<code>record_can_encode_dict</code>/<code>*record*</code>",id:"record_encodes_to_dictrecord_can_encode_dictrecord",level:3},{value:"<code>allow_tuple_notation</code>",id:"allow_tuple_notation",level:3},{value:"<code>fingerprint_returns_digest</code>",id:"fingerprint_returns_digest",level:3}],s={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"options"},"Options"),(0,o.kt)("p",null,"The behaviour of ",(0,o.kt)("inlineCode",{parentName:"p"},"cavro")," can be customized throught the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/#class-options"},"Options")," class."),(0,o.kt)("p",null,"Many of the options are not helpful to configure other than in special circumstances, however some may be useful for compatibility or useability reasons."),(0,o.kt)("h2",{id:"common-options"},"Common options"),(0,o.kt)("h3",{id:"record_encodes_to_dictrecord_can_encode_dictrecord"},(0,o.kt)("inlineCode",{parentName:"h3"},"record_encodes_to_dict"),"/",(0,o.kt)("inlineCode",{parentName:"h3"},"record_can_encode_dict"),"/",(0,o.kt)("inlineCode",{parentName:"h3"},"*record*")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/user-guide/records"},"the record type guide")),(0,o.kt)("h3",{id:"allow_tuple_notation"},(0,o.kt)("inlineCode",{parentName:"h3"},"allow_tuple_notation")),(0,o.kt)("p",null,"With this option set to ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", values passed to encode that are a ",(0,o.kt)("inlineCode",{parentName:"p"},"tuple")," with two items have a special meaning.\nThe tuple values are:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(<type name>, <value>)")),(0,o.kt)("p",null,"cavro will use the type name to ensure that the value is encoded correctly.  For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"schema = cavro.Schema(\n    ['string', {'type': 'enum', 'name': 'X', 'symbols': ['AAAAA', 'BBBBB']}],\n    allow_tuple_notation=True\n    )\n\ndef round_trip(msg, value):\n    encoded = schema.binary_encode(value)\n    decoded = schema.binary_decode(encoded)\n    print(f'{msg.ljust(13)}: {str(value).ljust(19)} \u2192 {str(encoded).ljust(15)} \u2192 {decoded}')\n\nround_trip('Normal',       'AAAAA',)\nround_trip('Tuple string', ('string', 'AAAAA'))\nround_trip('Tuple enum', ('X', 'AAAAA'))\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Normal       : AAAAA               \u2192 b'\\x00\\nAAAAA'  \u2192 AAAAA\nTuple string : ('string', 'AAAAA') \u2192 b'\\x00\\nAAAAA'  \u2192 AAAAA\nTuple enum   : ('X', 'AAAAA')      \u2192 b'\\x02\\x00'     \u2192 AAAAA\n")),(0,o.kt)("p",null,"You can see that we end up with the same result each time, but the encoded value of the last tine is much shorter than the others, because the enum symbol has been encoded rather than a string."),(0,o.kt)("p",null,"The same applies to records:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"schema = cavro.Schema(\n    [\n        {'type': 'record', 'name': 'X', 'fields': [{'name': 'a', 'type': 'int'}]},\n        {'type': 'record', 'name': 'Y', 'fields': [{'name': 'a', 'type': 'int'}]},\n    ],\n    allow_tuple_notation=True\n)\n\nround_trip('Normal',  {'a': 1})\nround_trip('Tuple X', ('X', {'a': 1}))\nround_trip('Tuple Y', ('Y', {'a': 1}))\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Normal       : {'a': 1}            \u2192 b'\\x00\\x02'     \u2192 <Record:X {a: 1}>\nTuple X      : ('X', {'a': 1})     \u2192 b'\\x00\\x02'     \u2192 <Record:X {a: 1}>\nTuple Y      : ('Y', {'a': 1})     \u2192 b'\\x02\\x02'     \u2192 <Record:Y {a: 1}>\n")),(0,o.kt)("h3",{id:"fingerprint_returns_digest"},(0,o.kt)("inlineCode",{parentName:"h3"},"fingerprint_returns_digest")),(0,o.kt)("p",null,"By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Schema.fingerprint")," method returns an object that is a ",(0,o.kt)("inlineCode",{parentName:"p"},"hashlib.HASH")," object\nallowing the caller to choose which representation of the hash to use."),(0,o.kt)("p",null,"If you set this to ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", then ",(0,o.kt)("inlineCode",{parentName:"p"},"Schema.fingerprint")," returns a binary digest of the value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(cavro.Schema('{\"type\": \"string\"}').fingerprint('sha256'))\nprint(cavro.Schema('{\"type\": \"string\"}', fingerprint_returns_digest=True).fingerprint('sha256'))\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'<sha256 _hashlib.HASH object @ 0x10a3e2e70>\nb"\\xe9\\xe5\\xc1\\xc9\\xe4\\xf6\'s9\\xd1\\xbc\\xde\\x073\\xa5\\x9b\\xd4/\\x871\\xf4I\\xdam\\xc10\\x10\\xa9\\x16\\x93\\rH"\n')))}u.isMDXComponent=!0}}]);