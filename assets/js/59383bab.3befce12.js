"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[568],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},v=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(t),v=a,g=p["".concat(l,".").concat(v)]||p[v]||u[v]||o;return t?r.createElement(g,i(i({ref:n},d),{},{components:t})):r.createElement(g,i({ref:n},d))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=v;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}v.displayName="MDXCreateElement"},4387:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:1},i="1 Minute Introduction to cavro",c={unversionedId:"user-guide/intro",id:"user-guide/intro",title:"1 Minute Introduction to cavro",description:"Installation",source:"@site/docs/user-guide/intro.md",sourceDirName:"user-guide",slug:"/user-guide/intro",permalink:"/docs/user-guide/intro",draft:!1,editUrl:"https://github.com/stestagg/cavro/tree/main/doc/docs/user-guide/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"User Guide",permalink:"/docs/category/user-guide"},next:{title:"Logical Types",permalink:"/docs/user-guide/logical-types"}},l={},s=[{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Decoding AVRO objects",id:"decoding-avro-objects",level:3},{value:"Encoding AVRO objects",id:"encoding-avro-objects",level:3},{value:"Reading &amp; Writing Files",id:"reading--writing-files",level:2},{value:"Decoding Raw AVRO from a file",id:"decoding-raw-avro-from-a-file",level:3},{value:"Encoding Raw AVRO to a file",id:"encoding-raw-avro-to-a-file",level:3},{value:"Reading AVRO object container files",id:"reading-avro-object-container-files",level:3},{value:"Writing AVRO object container files",id:"writing-avro-object-container-files",level:3}],d={toc:s},p="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1-minute-introduction-to-cavro"},"1 Minute Introduction to cavro"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Install cavro using pip:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ pip install cavro\n")),(0,a.kt)("p",null,"or"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ python3 -m pip install cavro\n")),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("h3",{id:"decoding-avro-objects"},"Decoding AVRO objects"),(0,a.kt)("p",null,"If you have a schema and an avro object in ",(0,a.kt)("inlineCode",{parentName:"p"},"bytes"),", then decoding it is simple:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import cavro\n\nschema = cavro.Schema('{\"type\": \"int\"}')\nencoded_avro = b'\\x8a1'\n\ndecoded = schema.binary_decode(encoded_avro)\nassert decoded == 3141\n")),(0,a.kt)("h3",{id:"encoding-avro-objects"},"Encoding AVRO objects"),(0,a.kt)("p",null,"Encoding values to avro is the opposite:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import cavro\n\nschema = cavro.Schema('{\"type\": \"int\"}')\nvalue = 3141\n\nencoded = schema.binary_encode(value)\nassert encoded == b'\\x8a1'\n")),(0,a.kt)("h2",{id:"reading--writing-files"},"Reading & Writing Files"),(0,a.kt)("p",null,"cavro supports reading and writing avro binary content from files, both as raw avro objects, and from the avro object container format."),(0,a.kt)("h3",{id:"decoding-raw-avro-from-a-file"},"Decoding Raw AVRO from a file"),(0,a.kt)("p",null,"If you have a file (or file-like object) containing the avro data, this can be decoded directly."),(0,a.kt)("p",null,"cavro just reads a single value from the stream, and does not seek, or check if any more objects are on the stream.\nSerial reading/writing and checking for extra data can easily be added in the calling code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import cavro\n\nschema = cavro.Schema('{\"type\": \"long\"}')\n\nwith open('my-file.bin', 'rb') as fh:\n    reader = cavro.FileReader(fh)\n    print(schema.binary_read(reader))\n")),(0,a.kt)("h3",{id:"encoding-raw-avro-to-a-file"},"Encoding Raw AVRO to a file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import cavro\n\nschema = cavro.Schema({\"type\": \"long\"})\n\nwith open('my-file.bin', 'wb') as fh:\n    writer = cavro.FileWriter(fh)\n    schema.binary_write(writer, 3141)\n")),(0,a.kt)("h3",{id:"reading-avro-object-container-files"},"Reading AVRO object container files"),(0,a.kt)("p",null,"Files that are in the ",(0,a.kt)("a",{parentName:"p",href:"https://avro.apache.org/docs/1.11.1/specification/#object-container-files"},"avro object container format")," can be read directly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import cavro\n\nfor obj in cavro.ContainerReader('file.avro'):\n    print(obj)\n")),(0,a.kt)("h3",{id:"writing-avro-object-container-files"},"Writing AVRO object container files"),(0,a.kt)("p",null,"To write a container format file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import cavro\n\nschema = cavro.Schema(...)\nwith cavro.ContainerWriter('file.avro', schema, codec='snappy') as writer:\n    writer.write_many(values_to_write)\n")))}u.isMDXComponent=!0}}]);