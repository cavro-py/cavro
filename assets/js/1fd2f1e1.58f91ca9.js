"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[335],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>h});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=p(t),u=a,h=l["".concat(s,".").concat(u)]||l[u]||m[u]||o;return t?n.createElement(h,i(i({ref:r},d),{},{components:t})):n.createElement(h,i({ref:r},d))}));function h(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c[l]="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8610:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var n=t(7462),a=(t(7294),t(3905));const o={},i="Schema Promotion",c={unversionedId:"user-guide/promotion",id:"user-guide/promotion",title:"Schema Promotion",description:"Also known as Reader/Writer schemas, or Schema Resolution.",source:"@site/docs/user-guide/promotion.md",sourceDirName:"user-guide",slug:"/user-guide/promotion",permalink:"/docs/user-guide/promotion",draft:!1,editUrl:"https://github.com/stestagg/cavro/tree/main/doc/docs/user-guide/promotion.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Options",permalink:"/docs/user-guide/options"},next:{title:"Record Types",permalink:"/docs/user-guide/records"}},s={},p=[{value:"Object Container promotion",id:"object-container-promotion",level:2},{value:"Eager promotion",id:"eager-promotion",level:2}],d={toc:p},l="wrapper";function m(e){let{components:r,...t}=e;return(0,a.kt)(l,(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"schema-promotion"},"Schema Promotion"),(0,a.kt)("p",null,"Also known as Reader/Writer schemas, or Schema Resolution."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cavro")," supports reading avro messages using a different schema definition that data was written with, provided the standard schema resolution rules are met."),(0,a.kt)("p",null,"resolution is done by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"Schema.reader_for_writer")," on the reader's schema, which returns a special schema object that can be used for decoding (but not encoding) avro:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"writer_schema = cavro.Schema({\n    'type': 'record',\n    'name': 'Record',\n    'fields': [\n        {'name': 'user_id', 'type': 'bytes'},\n        {'name': 'ip', 'type': {'type': 'fixed', 'size': 4, 'name': 'IP'}},\n        {'name': 'created', 'type': 'long'},\n    ]\n})\navro_data = writer_schema.binary_encode({'user_id': b'John', 'ip': b'\\x7f\\x00\\x00\\x01', 'created': 1234567890})\n\nreader_schema = cavro.Schema({\n    'type': 'record',\n    'name': 'Record',\n    'fields': [\n        # Read string instead of bytes\n        {'name': 'user_id', 'type': 'string'},\n        # Union rather than single type\n        {'name': 'ip', 'type': [\n            # Rename type with aliases\n            {'type': 'fixed', 'size': 4, 'name': 'IPv4', 'aliases': ['IP']},\n            {'type': 'fixed', 'size': 16, 'name': 'IPv6'},\n        ]},\n        # Convert long to double\n        {'name': 'created', 'type': 'double'},\n        # New field with default\n        {'name': 'deleted', 'type': 'boolean', 'default': False}\n    ]\n})\n\nreader_for_writer = reader_schema.reader_for_writer(writer_schema)\n\nprint(reader_for_writer.binary_decode(avro_data))\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<Record:Record {user_id: 'John' ip: b'\\x7f\\x00\\x00\\x01' created: 1234567890.0 deleted: False...}>\n")),(0,a.kt)("p",null,"Trying to do the same on the reader schema directly will result in errors or corrupt data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"try:\n    reader_schema.binary_decode(avro_data)\nexcept Exception as e:\n    print(e)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Value -64 is not valid for a union of 2 items\n")),(0,a.kt)("h2",{id:"object-container-promotion"},"Object Container promotion"),(0,a.kt)("p",null,"When reading object containers with ",(0,a.kt)("a",{parentName:"p",href:"/docs/api#class-containerreader"},"cavro.ContainerReader"),", schema resolution is performed automatically based on the writer schema embedded in the container file."),(0,a.kt)("h2",{id:"eager-promotion"},"Eager promotion"),(0,a.kt)("p",null,"Unlike most other libraries, schema resolution is done up-front, before any avro data is read, allowing for efficient decode strategies."),(0,a.kt)("p",null,"This does mean that errors may be raised sooner than otherwise expected.  There is an option ",(0,a.kt)("inlineCode",{parentName:"p"},"defer_schema_promotion_errors")," that will ignore promotion errors until a value is parsed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"incompatible_schema = cavro.Schema('\"int\"')\n\ntry:\n    incompatible_schema.reader_for_writer(writer_schema)\nexcept Exception as e:\n    print(e)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Cannot promote int to {'name': 'Record', 'fields': [{'name': 'user_id', 'type': 'bytes'}, {'name': 'ip', 'type': {'name': 'IP', 'size': 4, 'type': 'fixed'}}, {'name': 'created', 'type': 'long'}], 'type': 'record'}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"incompatible_schema = cavro.Schema('\"int\"', defer_schema_promotion_errors=True)\nincompatible_reader = incompatible_schema.reader_for_writer(writer_schema)\n\nprint('We got a reader schema: ', incompatible_reader)\nprint('But when a value is read:')\ntry:\n    incompatible_reader.binary_decode(avro_data)\nexcept Exception as e:\n    print(e)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"We got a reader schema:  <cavro.ResolvedSchema object at 0x164846d90>\nBut when a value is read:\nCannot promote int to {'name': 'Record', 'fields': [{'name': 'user_id', 'type': 'bytes'}, {'name': 'ip', 'type': {'name': 'IP', 'size': 4, 'type': 'fixed'}}, {'name': 'created', 'type': 'long'}], 'type': 'record'}\n")))}m.isMDXComponent=!0}}]);