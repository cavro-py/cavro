"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[207],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>u});var s=t(7294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,s)}return t}function n(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function r(e,a){if(null==e)return{};var t,s,l=function(e,a){if(null==e)return{};var t,s,l={},i=Object.keys(e);for(s=0;s<i.length;s++)t=i[s],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)t=i[s],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=s.createContext({}),_=function(e){var a=s.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):n(n({},a),e)),t},c=function(e){var a=_(e.components);return s.createElement(p.Provider,{value:a},e.children)},o="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},d=s.forwardRef((function(e,a){var t=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),o=_(t),d=l,u=o["".concat(p,".").concat(d)]||o[d]||m[d]||i;return t?s.createElement(u,n(n({ref:a},c),{},{components:t})):s.createElement(u,n({ref:a},c))}));function u(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var i=t.length,n=new Array(i);n[0]=d;var r={};for(var p in a)hasOwnProperty.call(a,p)&&(r[p]=a[p]);r.originalType=e,r[o]="string"==typeof e?e:l,n[1]=r;for(var _=2;_<i;_++)n[_]=t[_];return s.createElement.apply(null,n)}return s.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7480:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>n,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>_});var s=t(7462),l=(t(7294),t(3905));const i={title:"API Reference",custom_edit_url:null},n=void 0,r={unversionedId:"api",id:"api",title:"API Reference",description:"All members of cavro are defined in the top-level module.",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/docs/api",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{title:"API Reference",custom_edit_url:null},sidebar:"docsSidebar",previous:{title:"Schemas",permalink:"/docs/user-guide/schemas"},next:{title:"Benchmarks",permalink:"/docs/benchmarks"}},p={},_=[{value:"Main Interface Classes",id:"main-interface-classes",level:2},{value:'<span class="api__item_class">class</span> Schema',id:"class-schema",level:3},{value:"Members:",id:"members",level:4},{value:'<span class="api__item_class">init</span> Schema(self, /, *args, **kwargs)',id:"init-schemaself--args-kwargs",level:5},{value:'<span class="api__item_class">method</span> fingerprint(self, method=&#39;rabin&#39;, **kwargs) \u2192 Unionbytes, _hashlib.HASH',id:"method-fingerprintself-methodrabin-kwargs--unionbytes-_hashlibhash",level:5},{value:'<span class="api__item_class">method</span> can_encode(self, value: object) \u2192 bool',id:"method-can_encodeself-value-object--bool",level:5},{value:'<span class="api__item_class">method</span> binary_encode(self, value: object) \u2192 bytes',id:"method-binary_encodeself-value-object--bytes",level:5},{value:'<span class="api__item_class">method</span> binary_decode(self, value: bytes) \u2192 object',id:"method-binary_decodeself-value-bytes--object",level:5},{value:'<span class="api__item_class">method</span> json_encode(self, value, serialize=True, **kwargs)',id:"method-json_encodeself-value-serializetrue-kwargs",level:5},{value:'<span class="api__item_class">method</span> json_decode(self, value: Unionstr, object, deserialize: bool = True, **kwargs)',id:"method-json_decodeself-value-unionstr-object-deserialize-bool--true-kwargs",level:5},{value:'<span class="api__item_class">attr</span> canonical_form',id:"attr-canonical_form",level:5},{value:'<span class="api__item_class">attr</span> schema',id:"attr-schema",level:5},{value:'<span class="api__item_class">attr</span> schema_str',id:"attr-schema_str",level:5},{value:'<span class="api__item_class">attr</span> named_types',id:"attr-named_types",level:5},{value:'<span class="api__item_class">attr</span> source',id:"attr-source",level:5},{value:'<span class="api__item_class">attr</span> options',id:"attr-options",level:5},{value:'<span class="api__item_class">attr</span> type',id:"attr-type",level:5},{value:'<span class="api__item_class">attr</span> logical_types',id:"attr-logical_types",level:5},{value:'<span class="api__item_class">method</span> find_type(self, namespace, name, _raise=True)',id:"method-find_typeself-namespace-name-_raisetrue",level:5},{value:'<span class="api__item_class">method</span> binary_read(self, reader: cavro._Reader)',id:"method-binary_readself-reader-cavro_reader",level:5},{value:'<span class="api__item_class">method</span> binary_write(self, writer: cavro._Writer, value: object)',id:"method-binary_writeself-writer-cavro_writer-value-object",level:5},{value:'<span class="api__item_class">method</span> reader_for_writer(self, writer_schema: cavro.Schema)',id:"method-reader_for_writerself-writer_schema-cavroschema",level:5},{value:'<span class="api__item_class">class</span> Options',id:"class-options",level:3},{value:"Members:",id:"members-1",level:4},{value:'<span class="api__item_class">init</span> Options(self, /, *args, **kwargs)',id:"init-optionsself--args-kwargs",level:5},{value:'<span class="api__item_class">method</span> replace(self, **changes) \u2192 cavro.Options',id:"method-replaceself-changes--cavrooptions",level:5},{value:'<span class="api__item_class">method</span> with_logical_types(self, *logical_types)',id:"method-with_logical_typesself-logical_types",level:5},{value:'<span class="api__item_class">method</span> with_external_types(self, named_types: dictstr, cavro.AvroType) \u2192 cavro.Options',id:"method-with_external_typesself-named_types-dictstr-cavroavrotype--cavrooptions",level:5},{value:'<span class="api__item_class">method</span> equals(     self,     other: cavro.Options,     ignore: collections.abc.Sequencestr = () ) \u2192 bool',id:"method-equals-----self-----other-cavrooptions-----ignore-collectionsabcsequencestr-----bool",level:5},{value:'<span class="api__item_class">method</span> diff(     self,     other: cavro.Options,     ignore: collections.abc.Sequencestr = () ) \u2192 dict[str, tupleobject, object]',id:"method-diff-----self-----other-cavrooptions-----ignore-collectionsabcsequencestr-----dictstr-tupleobject-object",level:5},{value:'<span class="api__item_class">attr</span> name_pattern',id:"attr-name_pattern",level:5},{value:'<span class="api__item_class">attr</span> fingerprint_returns_digest',id:"attr-fingerprint_returns_digest",level:5},{value:'<span class="api__item_class">attr</span> canonical_form_repeat_fixed',id:"attr-canonical_form_repeat_fixed",level:5},{value:'<span class="api__item_class">attr</span> canonical_form_repeat_enum',id:"attr-canonical_form_repeat_enum",level:5},{value:'<span class="api__item_class">attr</span> record_can_encode_dict',id:"attr-record_can_encode_dict",level:5},{value:'<span class="api__item_class">attr</span> record_values_type_hint',id:"attr-record_values_type_hint",level:5},{value:'<span class="api__item_class">attr</span> record_decodes_to_dict',id:"attr-record_decodes_to_dict",level:5},{value:'<span class="api__item_class">attr</span> record_allow_extra_fields',id:"attr-record_allow_extra_fields",level:5},{value:'<span class="api__item_class">attr</span> record_encode_use_defaults',id:"attr-record_encode_use_defaults",level:5},{value:'<span class="api__item_class">attr</span> allow_tuple_notation',id:"attr-allow_tuple_notation",level:5},{value:'<span class="api__item_class">attr</span> union_decodes_to',id:"attr-union_decodes_to",level:5},{value:'<span class="api__item_class">attr</span> union_json_encodes_type_name',id:"attr-union_json_encodes_type_name",level:5},{value:'<span class="api__item_class">attr</span> allow_primitive_name_collision',id:"attr-allow_primitive_name_collision",level:5},{value:'<span class="api__item_class">attr</span> allow_primitive_names_in_namespaces',id:"attr-allow_primitive_names_in_namespaces",level:5},{value:'<span class="api__item_class">attr</span> named_type_names_must_be_unique',id:"attr-named_type_names_must_be_unique",level:5},{value:'<span class="api__item_class">attr</span> enum_symbols_must_be_unique',id:"attr-enum_symbols_must_be_unique",level:5},{value:'<span class="api__item_class">attr</span> enforce_enum_symbol_name_rules',id:"attr-enforce_enum_symbol_name_rules",level:5},{value:'<span class="api__item_class">attr</span> enforce_type_name_rules',id:"attr-enforce_type_name_rules",level:5},{value:'<span class="api__item_class">attr</span> enforce_namespace_name_rules',id:"attr-enforce_namespace_name_rules",level:5},{value:'<span class="api__item_class">attr</span> record_fields_must_be_unique',id:"attr-record_fields_must_be_unique",level:5},{value:'<span class="api__item_class">attr</span> ascii_name_rules',id:"attr-ascii_name_rules",level:5},{value:'<span class="api__item_class">attr</span> missing_values_can_be_null',id:"attr-missing_values_can_be_null",level:5},{value:'<span class="api__item_class">attr</span> missing_values_can_be_empty_container',id:"attr-missing_values_can_be_empty_container",level:5},{value:'<span class="api__item_class">attr</span> allow_false_values_for_null',id:"attr-allow_false_values_for_null",level:5},{value:'<span class="api__item_class">attr</span> allow_empty_unions',id:"attr-allow_empty_unions",level:5},{value:'<span class="api__item_class">attr</span> allow_nested_unions',id:"attr-allow_nested_unions",level:5},{value:'<span class="api__item_class">attr</span> allow_duplicate_union_types',id:"attr-allow_duplicate_union_types",level:5},{value:'<span class="api__item_class">attr</span> allow_union_default_any_member',id:"attr-allow_union_default_any_member",level:5},{value:'<span class="api__item_class">attr</span> allow_aliases_to_be_string',id:"attr-allow_aliases_to_be_string",level:5},{value:'<span class="api__item_class">attr</span> coerce_values_to_int',id:"attr-coerce_values_to_int",level:5},{value:'<span class="api__item_class">attr</span> coerce_values_to_float',id:"attr-coerce_values_to_float",level:5},{value:'<span class="api__item_class">attr</span> coerce_int_to_float',id:"attr-coerce_int_to_float",level:5},{value:'<span class="api__item_class">attr</span> coerce_values_to_boolean',id:"attr-coerce_values_to_boolean",level:5},{value:'<span class="api__item_class">attr</span> coerce_values_to_str',id:"attr-coerce_values_to_str",level:5},{value:'<span class="api__item_class">attr</span> bytes_codec',id:"attr-bytes_codec",level:5},{value:'<span class="api__item_class">attr</span> fixed_codec',id:"attr-fixed_codec",level:5},{value:'<span class="api__item_class">attr</span> null_pad_fixed',id:"attr-null_pad_fixed",level:5},{value:'<span class="api__item_class">attr</span> truncate_fixed',id:"attr-truncate_fixed",level:5},{value:'<span class="api__item_class">attr</span> clamp_int_overflow',id:"attr-clamp_int_overflow",level:5},{value:'<span class="api__item_class">attr</span> clamp_float_overflow',id:"attr-clamp_float_overflow",level:5},{value:'<span class="api__item_class">attr</span> float_out_of_range_inf',id:"attr-float_out_of_range_inf",level:5},{value:'<span class="api__item_class">attr</span> bytes_default_value_utf8',id:"attr-bytes_default_value_utf8",level:5},{value:'<span class="api__item_class">attr</span> string_types_default_unchanged',id:"attr-string_types_default_unchanged",level:5},{value:'<span class="api__item_class">attr</span> decimal_check_exp_overflow',id:"attr-decimal_check_exp_overflow",level:5},{value:'<span class="api__item_class">attr</span> types_str_to_schema',id:"attr-types_str_to_schema",level:5},{value:'<span class="api__item_class">attr</span> logical_types',id:"attr-logical_types-1",level:5},{value:'<span class="api__item_class">attr</span> adapt_record_types',id:"attr-adapt_record_types",level:5},{value:'<span class="api__item_class">attr</span> return_uuid_object',id:"attr-return_uuid_object",level:5},{value:'<span class="api__item_class">attr</span> allow_error_type',id:"attr-allow_error_type",level:5},{value:'<span class="api__item_class">attr</span> allow_leading_dot_in_names',id:"attr-allow_leading_dot_in_names",level:5},{value:'<span class="api__item_class">attr</span> naive_dt_assume_utc',id:"attr-naive_dt_assume_utc",level:5},{value:'<span class="api__item_class">attr</span> alternate_timestamp_millis_encoding',id:"attr-alternate_timestamp_millis_encoding",level:5},{value:'<span class="api__item_class">attr</span> date_type_accepts_string',id:"attr-date_type_accepts_string",level:5},{value:'<span class="api__item_class">attr</span> raise_on_invalid_logical',id:"attr-raise_on_invalid_logical",level:5},{value:'<span class="api__item_class">attr</span> inline_namespaces',id:"attr-inline_namespaces",level:5},{value:'<span class="api__item_class">attr</span> expand_types_in_schema',id:"attr-expand_types_in_schema",level:5},{value:'<span class="api__item_class">attr</span> unicode_errors',id:"attr-unicode_errors",level:5},{value:'<span class="api__item_class">attr</span> container_fill_blocks',id:"attr-container_fill_blocks",level:5},{value:'<span class="api__item_class">attr</span> defer_schema_promotion_errors',id:"attr-defer_schema_promotion_errors",level:5},{value:'<span class="api__item_class">attr</span> invalid_value_includes_record_name',id:"attr-invalid_value_includes_record_name",level:5},{value:'<span class="api__item_class">attr</span> invalid_value_include_array_index',id:"attr-invalid_value_include_array_index",level:5},{value:'<span class="api__item_class">attr</span> invalid_value_include_map_key',id:"attr-invalid_value_include_map_key",level:5},{value:'<span class="api__item_class">attr</span> allow_invalid_default_values',id:"attr-allow_invalid_default_values",level:5},{value:'<span class="api__item_class">attr</span> externally_defined_types',id:"attr-externally_defined_types",level:5},{value:'<span class="api__item_class">class</span> ContainerReader',id:"class-containerreader",level:3},{value:"Members:",id:"members-2",level:4},{value:'<span class="api__item_class">init</span> ContainerReader(self, /, *args, **kwargs)',id:"init-containerreaderself--args-kwargs",level:5},{value:'<span class="api__item_class">attr</span> metadata',id:"attr-metadata",level:5},{value:'<span class="api__item_class">attr</span> marker',id:"attr-marker",level:5},{value:'<span class="api__item_class">attr</span> writer_schema',id:"attr-writer_schema",level:5},{value:'<span class="api__item_class">attr</span> reader_schema',id:"attr-reader_schema",level:5},{value:'<span class="api__item_class">attr</span> schema',id:"attr-schema-1",level:5},{value:'<span class="api__item_class">attr</span> codec_name',id:"attr-codec_name",level:5},{value:'<span class="api__item_class">attr</span> objects_left_in_block',id:"attr-objects_left_in_block",level:5},{value:'<span class="api__item_class">method</span> next_object(self)',id:"method-next_objectself",level:5},{value:'<span class="api__item_class">class</span> ContainerWriter',id:"class-containerwriter",level:3},{value:"Members:",id:"members-3",level:4},{value:'<span class="api__item_class">method</span> close(self)',id:"method-closeself",level:5},{value:'<span class="api__item_class">method</span> flush(self, force=False)',id:"method-flushself-forcefalse",level:5},{value:'<span class="api__item_class">method</span> write_many(self, objs)',id:"method-write_manyself-objs",level:5},{value:'<span class="api__item_class">attr</span> closed',id:"attr-closed",level:5},{value:'<span class="api__item_class">attr</span> schema',id:"attr-schema-2",level:5},{value:'<span class="api__item_class">attr</span> codec',id:"attr-codec",level:5},{value:'<span class="api__item_class">attr</span> marker',id:"attr-marker-1",level:5},{value:'<span class="api__item_class">attr</span> max_blocksize',id:"attr-max_blocksize",level:5},{value:'<span class="api__item_class">attr</span> options',id:"attr-options-1",level:5},{value:'<span class="api__item_class">attr</span> should_write_header',id:"attr-should_write_header",level:5},{value:'<span class="api__item_class">attr</span> num_pending',id:"attr-num_pending",level:5},{value:'<span class="api__item_class">attr</span> blocks_written',id:"attr-blocks_written",level:5},{value:'<span class="api__item_class">attr</span> metadata',id:"attr-metadata-1",level:5},{value:'<span class="api__item_class">method</span> write_one(self, obj)',id:"method-write_oneself-obj",level:5},{value:'<span class="api__item_class">class</span> FileReader',id:"class-filereader",level:3},{value:"Members:",id:"members-4",level:4},{value:'<span class="api__item_class">init</span> FileReader(self, /, *args, **kwargs)',id:"init-filereaderself--args-kwargs",level:5},{value:'<span class="api__item_class">class</span> FileWriter',id:"class-filewriter",level:3},{value:"Members:",id:"members-5",level:4},{value:'<span class="api__item_class">init</span> FileWriter(self, /, *args, **kwargs)',id:"init-filewriterself--args-kwargs",level:5},{value:"Other Classes",id:"other-classes",level:2},{value:'<span class="api__item_class">class</span> MemoryWriter',id:"class-memorywriter",level:3},{value:"Members:",id:"members-6",level:4},{value:'<span class="api__item_class">attr</span> buffer',id:"attr-buffer",level:5},{value:'<span class="api__item_class">attr</span> len',id:"attr-len",level:5},{value:'<span class="api__item_class">class</span> MemoryReader',id:"class-memoryreader",level:3},{value:"Members:",id:"members-7",level:4},{value:'<span class="api__item_class">init</span> MemoryReader(self, /, *args, **kwargs)',id:"init-memoryreaderself--args-kwargs",level:5},{value:'<span class="api__item_class">class</span> Rabin',id:"class-rabin",level:3},{value:"Members:",id:"members-8",level:4},{value:'<span class="api__item_class">init</span> Rabin(self, /, *args, **kwargs)',id:"init-rabinself--args-kwargs",level:5},{value:'<span class="api__item_class">method</span> digest(self)',id:"method-digestself",level:5},{value:'<span class="api__item_class">method</span> hexdigest(self)',id:"method-hexdigestself",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself",level:5},{value:'<span class="api__item_class">attr</span> value',id:"attr-value",level:5},{value:'<span class="api__item_class">attr</span> name',id:"attr-name",level:5},{value:'<span class="api__item_class">attr</span> digest_size',id:"attr-digest_size",level:5},{value:'<span class="api__item_class">attr</span> block_size',id:"attr-block_size",level:5},{value:'<span class="api__item_class">method</span> update(self, data)',id:"method-updateself-data",level:5},{value:'<span class="api__item_class">class</span> Record',id:"class-record",level:3},{value:"Members:",id:"members-9",level:4},{value:'<span class="api__item_class">init</span> Record(self, /, *args, **kwargs)',id:"init-recordself--args-kwargs",level:5},{value:'<span class="api__item_class">class</span> RecordField',id:"class-recordfield",level:3},{value:"Members:",id:"members-10",level:4},{value:'<span class="api__item_class">init</span> RecordField(self, /, *args, **kwargs)',id:"init-recordfieldself--args-kwargs",level:5},{value:'<span class="api__item_class">method</span> get_schema(self, created)',id:"method-get_schemaself-created",level:5},{value:'<span class="api__item_class">attr</span> name',id:"attr-name-1",level:5},{value:'<span class="api__item_class">attr</span> writer_name',id:"attr-writer_name",level:5},{value:'<span class="api__item_class">attr</span> doc',id:"attr-doc",level:5},{value:'<span class="api__item_class">attr</span> type',id:"attr-type-1",level:5},{value:'<span class="api__item_class">attr</span> default_value',id:"attr-default_value",level:5},{value:'<span class="api__item_class">attr</span> order',id:"attr-order",level:5},{value:'<span class="api__item_class">attr</span> aliases',id:"attr-aliases",level:5},{value:'<span class="api__item_class">class</span> AvroType',id:"class-avrotype",level:3},{value:"Members:",id:"members-11",level:4},{value:'<span class="api__item_class">init</span> AvroType(self, /, *args, **kwargs)',id:"init-avrotypeself--args-kwargs",level:5},{value:'<span class="api__item_class">method</span> for_source(cls, schema, source, namespace=None)',id:"method-for_sourcecls-schema-source-namespacenone",level:5},{value:'<span class="api__item_class">method</span> for_schema(cls, schema)',id:"method-for_schemacls-schema",level:5},{value:'<span class="api__item_class">method</span> walk_types(self, visited)',id:"method-walk_typesself-visited",level:5},{value:'<span class="api__item_class">attr</span> type',id:"attr-type-2",level:5},{value:'<span class="api__item_class">attr</span> options',id:"attr-options-2",level:5},{value:'<span class="api__item_class">attr</span> metadata',id:"attr-metadata-2",level:5},{value:'<span class="api__item_class">attr</span> value_adapters',id:"attr-value_adapters",level:5},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-1",level:5},{value:'<span class="api__item_class">method</span> convert_value(self, value, check_value=False)',id:"method-convert_valueself-value-check_valuefalse",level:5},{value:'<span class="api__item_class">method</span> get_schema(self, created=None)',id:"method-get_schemaself-creatednone",level:5},{value:'<span class="api__item_class">class</span> UnionType',id:"class-uniontype",level:3},{value:"Members:",id:"members-12",level:4},{value:'<span class="api__item_class">init</span> UnionType(self, /, *args, **kwargs)',id:"init-uniontypeself--args-kwargs",level:5},{value:'<span class="api__item_class">method</span> walk_types(self, visited)',id:"method-walk_typesself-visited-1",level:5},{value:'<span class="api__item_class">attr</span> union_types',id:"attr-union_types",level:5},{value:'<span class="api__item_class">attr</span> by_name_map',id:"attr-by_name_map",level:5},{value:'<span class="api__item_class">attr</span> return_type_tuple',id:"attr-return_type_tuple",level:5},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-1",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-2",level:5},{value:'<span class="api__item_class">method</span> get_schema(self, created=None)',id:"method-get_schemaself-creatednone-1",level:5},{value:'<span class="api__item_class">method</span> convert_value(self, value, check_value=True)',id:"method-convert_valueself-value-check_valuetrue",level:5},{value:'<span class="api__item_class">class</span> StringType',id:"class-stringtype",level:3},{value:"Members:",id:"members-13",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-2",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-3",level:5},{value:'<span class="api__item_class">class</span> BytesType',id:"class-bytestype",level:3},{value:"Members:",id:"members-14",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-3",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-4",level:5},{value:'<span class="api__item_class">class</span> DoubleType',id:"class-doubletype",level:3},{value:"Members:",id:"members-15",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-4",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-5",level:5},{value:'<span class="api__item_class">class</span> FloatType',id:"class-floattype",level:3},{value:"Members:",id:"members-16",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-5",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-6",level:5},{value:'<span class="api__item_class">class</span> LongType',id:"class-longtype",level:3},{value:"Members:",id:"members-17",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-6",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-7",level:5},{value:'<span class="api__item_class">class</span> IntType',id:"class-inttype",level:3},{value:"Members:",id:"members-18",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-7",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-8",level:5},{value:'<span class="api__item_class">class</span> BoolType',id:"class-booltype",level:3},{value:"Members:",id:"members-19",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-8",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-9",level:5},{value:'<span class="api__item_class">class</span> NullType',id:"class-nulltype",level:3},{value:"Members:",id:"members-20",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-9",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-10",level:5},{value:'<span class="api__item_class">class</span> MapType',id:"class-maptype",level:3},{value:"Members:",id:"members-21",level:4},{value:'<span class="api__item_class">init</span> MapType(self, /, *args, **kwargs)',id:"init-maptypeself--args-kwargs",level:5},{value:'<span class="api__item_class">method</span> walk_types(self, visited)',id:"method-walk_typesself-visited-2",level:5},{value:'<span class="api__item_class">attr</span> value_type',id:"attr-value_type",level:5},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-10",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-11",level:5},{value:'<span class="api__item_class">method</span> convert_value(self, orig_value, check_value=True)',id:"method-convert_valueself-orig_value-check_valuetrue",level:5},{value:'<span class="api__item_class">class</span> ArrayType',id:"class-arraytype",level:3},{value:"Members:",id:"members-22",level:4},{value:'<span class="api__item_class">init</span> ArrayType(self, /, *args, **kwargs)',id:"init-arraytypeself--args-kwargs",level:5},{value:'<span class="api__item_class">method</span> walk_types(self, visited)',id:"method-walk_typesself-visited-3",level:5},{value:'<span class="api__item_class">attr</span> item_type',id:"attr-item_type",level:5},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-11",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-12",level:5},{value:'<span class="api__item_class">method</span> convert_value(self, value, check_value=True)',id:"method-convert_valueself-value-check_valuetrue-1",level:5},{value:'<span class="api__item_class">class</span> FixedType',id:"class-fixedtype",level:3},{value:"Members:",id:"members-23",level:4},{value:'<span class="api__item_class">init</span> FixedType(self, /, *args, **kwargs)',id:"init-fixedtypeself--args-kwargs",level:5},{value:'<span class="api__item_class">attr</span> size',id:"attr-size",level:5},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-12",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-13",level:5},{value:'<span class="api__item_class">class</span> RecordType',id:"class-recordtype",level:3},{value:"Members:",id:"members-24",level:4},{value:'<span class="api__item_class">init</span> RecordType(self, /, *args, **kwargs)',id:"init-recordtypeself--args-kwargs",level:5},{value:'<span class="api__item_class">method</span> walk_types(self, visited)',id:"method-walk_typesself-visited-4",level:5},{value:'<span class="api__item_class">attr</span> doc',id:"attr-doc-1",level:5},{value:'<span class="api__item_class">attr</span> fields',id:"attr-fields",level:5},{value:'<span class="api__item_class">attr</span> record',id:"attr-record",level:5},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-13",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-14",level:5},{value:'<span class="api__item_class">class</span> PromotingRecordType',id:"class-promotingrecordtype",level:3},{value:"Members:",id:"members-25",level:4},{value:'<span class="api__item_class">class</span> EnumType',id:"class-enumtype",level:3},{value:"Members:",id:"members-26",level:4},{value:'<span class="api__item_class">init</span> EnumType(self, /, *args, **kwargs)',id:"init-enumtypeself--args-kwargs",level:5},{value:'<span class="api__item_class">attr</span> symbols',id:"attr-symbols",level:5},{value:'<span class="api__item_class">attr</span> default_value',id:"attr-default_value-1",level:5},{value:'<span class="api__item_class">attr</span> doc',id:"attr-doc-2",level:5},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-14",level:5},{value:'<span class="api__item_class">method</span> copy(self)',id:"method-copyself-15",level:5},{value:'<span class="api__item_class">class</span> PromotingEnumType',id:"class-promotingenumtype",level:3},{value:"Members:",id:"members-27",level:4},{value:'<span class="api__item_class">attr</span> unknown_symbols',id:"attr-unknown_symbols",level:5},{value:'<span class="api__item_class">attr</span> reader_type',id:"attr-reader_type",level:5},{value:'<span class="api__item_class">attr</span> writer_type',id:"attr-writer_type",level:5},{value:'<span class="api__item_class">class</span> ResolvedSchema',id:"class-resolvedschema",level:3},{value:"Members:",id:"members-28",level:4},{value:'<span class="api__item_class">init</span> ResolvedSchema(self, /, *args, **kwargs)',id:"init-resolvedschemaself--args-kwargs",level:5},{value:'<span class="api__item_class">class</span> ValueAdapter',id:"class-valueadapter",level:3},{value:"Members:",id:"members-29",level:4},{value:'<span class="api__item_class">class</span> LogicalType',id:"class-logicaltype",level:3},{value:"Members:",id:"members-30",level:4},{value:'<span class="api__item_class">method</span> for_type(unknown)',id:"method-for_typeunknown",level:5},{value:'<span class="api__item_class">attr</span> logical_name',id:"attr-logical_name",level:5},{value:'<span class="api__item_class">attr</span> underlying_types',id:"attr-underlying_types",level:5},{value:'<span class="api__item_class">class</span> CustomLogicalType',id:"class-customlogicaltype",level:3},{value:"Members:",id:"members-31",level:4},{value:'<span class="api__item_class">class</span> DecimalType',id:"class-decimaltype",level:3},{value:"Members:",id:"members-32",level:4},{value:'<span class="api__item_class">init</span> DecimalType(self, /, *args, **kwargs)',id:"init-decimaltypeself--args-kwargs",level:5},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-15",level:5},{value:'<span class="api__item_class">attr</span> precision',id:"attr-precision",level:5},{value:'<span class="api__item_class">attr</span> scale',id:"attr-scale",level:5},{value:'<span class="api__item_class">attr</span> scale_val',id:"attr-scale_val",level:5},{value:'<span class="api__item_class">attr</span> context',id:"attr-context",level:5},{value:'<span class="api__item_class">attr</span> size',id:"attr-size-1",level:5},{value:'<span class="api__item_class">attr</span> check_exp_overflow',id:"attr-check_exp_overflow",level:5},{value:'<span class="api__item_class">attr</span> logical_name',id:"attr-logical_name-1",level:5},{value:'<span class="api__item_class">attr</span> underlying_types',id:"attr-underlying_types-1",level:5},{value:'<span class="api__item_class">class</span> UUIDBase',id:"class-uuidbase",level:3},{value:"Members:",id:"members-33",level:4},{value:'<span class="api__item_class">init</span> UUIDBase(self, /, *args, **kwargs)',id:"init-uuidbaseself--args-kwargs",level:5},{value:'<span class="api__item_class">attr</span> logical_name',id:"attr-logical_name-2",level:5},{value:'<span class="api__item_class">class</span> UUIDStringType',id:"class-uuidstringtype",level:3},{value:"Members:",id:"members-34",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-16",level:5},{value:'<span class="api__item_class">attr</span> underlying_types',id:"attr-underlying_types-2",level:5},{value:'<span class="api__item_class">class</span> UUIDFixedType',id:"class-uuidfixedtype",level:3},{value:"Members:",id:"members-35",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-17",level:5},{value:'<span class="api__item_class">attr</span> underlying_types',id:"attr-underlying_types-3",level:5},{value:'<span class="api__item_class">class</span> Date',id:"class-date",level:3},{value:"Members:",id:"members-36",level:4},{value:'<span class="api__item_class">init</span> Date(self, /, *args, **kwargs)',id:"init-dateself--args-kwargs",level:5},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-18",level:5},{value:'<span class="api__item_class">attr</span> accepts_string',id:"attr-accepts_string",level:5},{value:'<span class="api__item_class">attr</span> logical_name',id:"attr-logical_name-3",level:5},{value:'<span class="api__item_class">attr</span> underlying_types',id:"attr-underlying_types-4",level:5},{value:'<span class="api__item_class">class</span> TimeMillis',id:"class-timemillis",level:3},{value:"Members:",id:"members-37",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-19",level:5},{value:'<span class="api__item_class">attr</span> logical_name',id:"attr-logical_name-4",level:5},{value:'<span class="api__item_class">attr</span> underlying_types',id:"attr-underlying_types-5",level:5},{value:'<span class="api__item_class">class</span> TimeMicros',id:"class-timemicros",level:3},{value:"Members:",id:"members-38",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-20",level:5},{value:'<span class="api__item_class">attr</span> logical_name',id:"attr-logical_name-5",level:5},{value:'<span class="api__item_class">attr</span> underlying_types',id:"attr-underlying_types-6",level:5},{value:'<span class="api__item_class">class</span> TimestampMillis',id:"class-timestampmillis",level:3},{value:"Members:",id:"members-39",level:4},{value:'<span class="api__item_class">init</span> TimestampMillis(self, /, *args, **kwargs)',id:"init-timestampmillisself--args-kwargs",level:5},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-21",level:5},{value:'<span class="api__item_class">attr</span> alternate_timestamp_encoding',id:"attr-alternate_timestamp_encoding",level:5},{value:'<span class="api__item_class">attr</span> logical_name',id:"attr-logical_name-6",level:5},{value:'<span class="api__item_class">attr</span> underlying_types',id:"attr-underlying_types-7",level:5},{value:'<span class="api__item_class">class</span> TimestampMicros',id:"class-timestampmicros",level:3},{value:"Members:",id:"members-40",level:4},{value:'<span class="api__item_class">attr</span> type_name',id:"attr-type_name-22",level:5},{value:'<span class="api__item_class">attr</span> logical_name',id:"attr-logical_name-7",level:5},{value:'<span class="api__item_class">attr</span> underlying_types',id:"attr-underlying_types-8",level:5},{value:'<span class="api__item_class">class</span> Codec',id:"class-codec",level:3},{value:"Members:",id:"members-41",level:4},{value:'<span class="api__item_class">attr</span> name',id:"attr-name-2",level:5},{value:'<span class="api__item_class">class</span> PromoteToFloat',id:"class-promotetofloat",level:3},{value:"Members:",id:"members-42",level:4},{value:'<span class="api__item_class">class</span> PromoteBytesToString',id:"class-promotebytestostring",level:3},{value:"Members:",id:"members-43",level:4},{value:'<span class="api__item_class">class</span> PromoteStringToBytes',id:"class-promotestringtobytes",level:3},{value:"Members:",id:"members-44",level:4},{value:'<span class="api__item_class">class</span> CannotPromote',id:"class-cannotpromote",level:3},{value:"Members:",id:"members-45",level:4},{value:'<span class="api__item_class">init</span> CannotPromote(self, /, *args, **kwargs)',id:"init-cannotpromoteself--args-kwargs",level:5},{value:'<span class="api__item_class">attr</span> reader_type',id:"attr-reader_type-1",level:5},{value:'<span class="api__item_class">attr</span> writer_type',id:"attr-writer_type-1",level:5},{value:'<span class="api__item_class">attr</span> extra',id:"attr-extra",level:5},{value:'<span class="api__item_class">class</span> CavroException',id:"class-cavroexception",level:3},{value:"Members:",id:"members-46",level:4},{value:'<span class="api__item_class">class</span> InvalidName',id:"class-invalidname",level:3},{value:"Members:",id:"members-47",level:4},{value:'<span class="api__item_class">class</span> UnknownType',id:"class-unknowntype",level:3},{value:"Members:",id:"members-48",level:4},{value:'<span class="api__item_class">init</span> UnknownType(self, name)',id:"init-unknowntypeself-name",level:5},{value:'<span class="api__item_class">class</span> DuplicateName',id:"class-duplicatename",level:3},{value:"Members:",id:"members-49",level:4},{value:'<span class="api__item_class">class</span> InvalidHasher',id:"class-invalidhasher",level:3},{value:"Members:",id:"members-50",level:4},{value:'<span class="api__item_class">class</span> ExponentTooLarge',id:"class-exponenttoolarge",level:3},{value:"Members:",id:"members-51",level:4},{value:'<span class="api__item_class">class</span> CodecUnavailable',id:"class-codecunavailable",level:3},{value:"Members:",id:"members-52",level:4},{value:'<span class="api__item_class">class</span> CannotPromoteError',id:"class-cannotpromoteerror",level:3},{value:"Members:",id:"members-53",level:4},{value:'<span class="api__item_class">init</span> CannotPromoteError(self, reader_type, writer_type, extra=None)',id:"init-cannotpromoteerrorself-reader_type-writer_type-extranone",level:5},{value:'<span class="api__item_class">class</span> InvalidValue',id:"class-invalidvalue",level:3},{value:"Members:",id:"members-54",level:4},{value:'<span class="api__item_class">init</span> InvalidValue(self, value, dest_type, path=())',id:"init-invalidvalueself-value-dest_type-path",level:5},{value:'<span class="api__item_class">class</span> UnionDecodeOption',id:"class-uniondecodeoption",level:3},{value:"Members:",id:"members-55",level:4},{value:'<span class="api__item_class">attr</span> RAW_VALUES',id:"attr-raw_values",level:5},{value:'<span class="api__item_class">attr</span> TYPE_TUPLE_IF_AMBIGUOUS',id:"attr-type_tuple_if_ambiguous",level:5},{value:'<span class="api__item_class">attr</span> TYPE_TUPLE_IF_RECORD_AMBIGUOUS',id:"attr-type_tuple_if_record_ambiguous",level:5},{value:'<span class="api__item_class">attr</span> TYPE_TUPLE_IF_RECORD',id:"attr-type_tuple_if_record",level:5},{value:'<span class="api__item_class">attr</span> TYPE_TUPLE_ALWAYS',id:"attr-type_tuple_always",level:5},{value:'<span class="api__item_class">class</span> Order',id:"class-order",level:3},{value:"Members:",id:"members-56",level:4},{value:'<span class="api__item_class">attr</span> ASC',id:"attr-asc",level:5},{value:'<span class="api__item_class">attr</span> DESC',id:"attr-desc",level:5},{value:'<span class="api__item_class">attr</span> IGNORE',id:"attr-ignore",level:5}],c={toc:_},o="wrapper";function m(e){let{components:a,...t}=e;return(0,l.kt)(o,(0,s.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"All members of cavro are defined in the top-level module."),(0,l.kt)("p",null,"Currently, the docs are a little funky, because cython doesn't expose Signtaure information that easily, and ",(0,l.kt)("inlineCode",{parentName:"p"},"pdoc"),"\nisn't geared up to handle it. This may change in the future."),(0,l.kt)("h2",{id:"main-interface-classes"},"Main Interface Classes"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-schema"},(0,l.kt)("span",{class:"api__item_class"},"class")," Schema"),(0,l.kt)("p",null,"The main interface for ",(0,l.kt)("inlineCode",{parentName:"p"},"cavro"),"."),(0,l.kt)("p",null,"This class represents an avro schema, and is able to encode and decode values appropriately."),(0,l.kt)("p",null,"Arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"source"),":\nThe source of the schema. This can either be a string that holds the JSON-encoded schema definition, or a python object that represents the schema (e.g. the result of ",(0,l.kt)("inlineCode",{parentName:"li"},"json.loads"),")."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"options"),":\nAn instance of ",(0,l.kt)("inlineCode",{parentName:"li"},"Options")," that controls how the schema is interpreted. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"DEFAULT_OPTIONS"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"named_types"),":\nAn optional dictionary that will be updated to contain any named types that are encountered while parsing the schema."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parse_json"),":\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"False")," then the ",(0,l.kt)("inlineCode",{parentName:"li"},"source")," argument will never be parsed as json, even if it's a string value. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**extra_options"),":\nAny extra options that should be applied to the schema. These will override any options that are set in the ",(0,l.kt)("inlineCode",{parentName:"li"},"options")," argument.\nKey-values here must match the attributes of ",(0,l.kt)("inlineCode",{parentName:"li"},"cavro.Options"),".")),(0,l.kt)("h4",{id:"members"},"Members:"),(0,l.kt)("h5",{id:"init-schemaself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," Schema(self, /, *args, **kwargs)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/schema.pxi#L118",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-fingerprintself-methodrabin-kwargs--unionbytes-_hashlibhash"},(0,l.kt)("span",{class:"api__item_class"},"method")," fingerprint(self, method=","'","rabin","'",", **kwargs) \u2192 Union","[bytes, _hashlib.HASH]"),(0,l.kt)("p",null,"Return the deterministic fingerprint of the schema, using the given hash method."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"**kwargs")," are passed to the relevant ",(0,l.kt)("inlineCode",{parentName:"p"},"hashlib.new()")," call."),(0,l.kt)("p",null,"Return type is controlled by the ",(0,l.kt)("inlineCode",{parentName:"p"},"fingerprint_returns_digest")," option."),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/schema.pxi#L159",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-can_encodeself-value-object--bool"},(0,l.kt)("span",{class:"api__item_class"},"method")," can_encode(self, value: object) \u2192 bool"),(0,l.kt)("p",null,"Check if ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," can be encoded using this schema"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/schema.pxi#L166",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-binary_encodeself-value-object--bytes"},(0,l.kt)("span",{class:"api__item_class"},"method")," binary_encode(self, value: object) \u2192 bytes"),(0,l.kt)("p",null,"Encode ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," using this schema and return the avro bytes representing it."),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/schema.pxi#L174",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-binary_decodeself-value-bytes--object"},(0,l.kt)("span",{class:"api__item_class"},"method")," binary_decode(self, value: bytes) \u2192 object"),(0,l.kt)("p",null,"Decode ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," using this schema and return the decoded value."),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/schema.pxi#L195",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-json_encodeself-value-serializetrue-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"method")," json_encode(self, value, serialize=True, **kwargs)"),(0,l.kt)("p",null,"Encode ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," using this schema and return the avro json representing it."),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/schema.pxi#L204",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-json_decodeself-value-unionstr-object-deserialize-bool--true-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"method")," json_decode(self, value: Union","[str, object]",", deserialize: bool = True, **kwargs)"),(0,l.kt)("p",null,"Decode ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," in JSON form using this schema and return the decoded value."),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"deserialize")," is True, then value must be a ",(0,l.kt)("inlineCode",{parentName:"p"},"str")," containing the serialized JSON value.\nIf ",(0,l.kt)("inlineCode",{parentName:"p"},"deserialize")," is False, then value must be a python object representing the JSON value."),(0,l.kt)("h5",{id:"attr-canonical_form"},(0,l.kt)("span",{class:"api__item_class"},"attr")," canonical_form"),(0,l.kt)("p",null,"Returns the canonical form of the schema as a string"),(0,l.kt)("h5",{id:"attr-schema"},(0,l.kt)("span",{class:"api__item_class"},"attr")," schema"),(0,l.kt)("p",null,"Return an object representing the schema definition.\nNote: This will not always be identical to the ",(0,l.kt)("inlineCode",{parentName:"p"},"source")," used to construct this schema object, as it is reconstructed from the types on-demand."),(0,l.kt)("h5",{id:"attr-schema_str"},(0,l.kt)("span",{class:"api__item_class"},"attr")," schema_str"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Schema.schema"),", but json encoded"),(0,l.kt)("h5",{id:"attr-named_types"},(0,l.kt)("span",{class:"api__item_class"},"attr")," named_types"),(0,l.kt)("h5",{id:"attr-source"},(0,l.kt)("span",{class:"api__item_class"},"attr")," source"),(0,l.kt)("h5",{id:"attr-options"},(0,l.kt)("span",{class:"api__item_class"},"attr")," options"),(0,l.kt)("h5",{id:"attr-type"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type"),(0,l.kt)("h5",{id:"attr-logical_types"},(0,l.kt)("span",{class:"api__item_class"},"attr")," logical_types"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/schema.pxi#L138",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-find_typeself-namespace-name-_raisetrue"},(0,l.kt)("span",{class:"api__item_class"},"method")," find_type(self, namespace, name, _raise=True)"),(0,l.kt)("p",null,"Given a namespace and name (namespace may be None), find and return the ",(0,l.kt)("inlineCode",{parentName:"p"},"AvroType")," instance matching this name."),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/schema.pxi#L181",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-binary_readself-reader-cavro_reader"},(0,l.kt)("span",{class:"api__item_class"},"method")," binary_read(self, reader: cavro._Reader)"),(0,l.kt)("p",null,"Read a value from ",(0,l.kt)("inlineCode",{parentName:"p"},"reader")," using this schema and return the decoded value.\n",(0,l.kt)("inlineCode",{parentName:"p"},"reader")," may be a ",(0,l.kt)("inlineCode",{parentName:"p"},"MemoryReader")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"FileReader")," instance."),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/schema.pxi#L188",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-binary_writeself-writer-cavro_writer-value-object"},(0,l.kt)("span",{class:"api__item_class"},"method")," binary_write(self, writer: cavro._Writer, value: object)"),(0,l.kt)("p",null,"Write ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"writer")," using this schema.\n",(0,l.kt)("inlineCode",{parentName:"p"},"writer")," may be a ",(0,l.kt)("inlineCode",{parentName:"p"},"MemoryWriter")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"FileWriter")," instance."),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/schema.pxi#L215",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-reader_for_writerself-writer_schema-cavroschema"},(0,l.kt)("span",{class:"api__item_class"},"method")," reader_for_writer(self, writer_schema: cavro.Schema)"),(0,l.kt)("p",null,"Return a schema that is the result of promoting this schema to the writer schema."),(0,l.kt)("p",null,"The returned schema may only be used for reading, and should return values that match the reader schema."),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-options"},(0,l.kt)("span",{class:"api__item_class"},"class")," Options"),(0,l.kt)("p",null,"Runtime configuration options for controlling the behaviour\nof a schema.\nInstances of ",(0,l.kt)("inlineCode",{parentName:"p"},"Options")," are immutable, create a modified copy of options, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"replace")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"with_*")," methods."),(0,l.kt)("p",null,"Attributes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fingerprint_returns_digest")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", the ",(0,l.kt)("inlineCode",{parentName:"li"},"Schema.fingerprint")," method returns a hashlib hash object, rather than the digest bytes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"canonical_form_repeat_fixed")," Some libraries repeat enum type definitions with the same name/size in canonical form.  Setting this flag to True replicates that"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"canonical_form_repeat_enum")," Some libraries repeat enum type definitions with the same name/symbols in canonical form.  Setting this flag to True replicates that"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"record_can_encode_dict")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", dicts can be encoded as records (provided they have the correct fields).  If false, then an instance of the relevant record type must be used."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"record_values_type_hint"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then dicts encoded using a record schema can have an optional key ",(0,l.kt)("inlineCode",{parentName:"li"},"-type")," (note the leading '-')\nwith a value that is the name of the record, ensuring the correct record schema is chosen."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"record_decodes_to_dict")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then records are decoded to a dict, rather than a record class instance"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"record_allow_extra_fields")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then any fields in a dict that are not in the record schema are ignored. If ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),", then an error is raised."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"record_fields_must_be_unique")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then all fields within a record must have a unique name"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"record_encode_use_defaults"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then when encoding a dict as a record, any fields that are not present in the dict are encoded using their default value from the schema.\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),", then an error is raised for any missing keys"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"missing_values_can_be_null")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then missing values may be encoded as ",(0,l.kt)("inlineCode",{parentName:"li"},"null")," where this is valid in the schema. (i.e. ",(0,l.kt)("inlineCode",{parentName:"li"},"['null', 'string']"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"missing_values_can_be_empty_container")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then missing values may be encoded as an empty container (list, dict) where this is valid in the schema."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_tuple_notation")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then values can be encoded by passing a 2-tuple of (\u2039type\u203a, \u2039value\u203a) where \u2039type\u203a is the name of the type to encode as, and \u2039value\u203a is the value to encode."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"union_decodes_to")," Controls how union values are decoded.  See ",(0,l.kt)("inlineCode",{parentName:"li"},"UnionDecodeOption")," for details.  The default, ",(0,l.kt)("inlineCode",{parentName:"li"},"UnionDecodeOption.RAW_VALUES")," returns the value from the matching union unmodified."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"union_json_encodes_type_name"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True")," (default), then when JSON encoding a value in a union, the type name is included in the output as per spec.\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),", then the JSON-encoded value of the matching union type is output directly."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_primitive_name_collision")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then named types can have the same name as one of the primitive types (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"str")," etc..)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_primitive_names_in_namespaces")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then namespace parts can have the same name as one of the primitive types (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"str")," etc..)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"named_type_names_must_be_unique")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then all named types must have a unique name within the schema"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enum_symbols_must_be_unique")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then all symbols within an enum must be unique"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enforce_enum_symbol_name_rules")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then enum symbol values are checked to ensure they match the rules for valid symbols"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enforce_type_name_rules")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then type names are checked to ensure they match the rules for valid names"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enforce_namespace_name_rules")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then namespace names are checked to ensure they match the rules for valid names"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ascii_name_rules"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then name checking (names/symbols) is done using the strict ASCII rules in the spec.\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),", then equivalent unicode rules are used."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_false_values_for_null")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then a null type will accept any value for which ",(0,l.kt)("inlineCode",{parentName:"li"},"bool(value)")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),", otherwise an error is raised for any non-",(0,l.kt)("inlineCode",{parentName:"li"},"None")," value."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_empty_unions")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then unions can be empty (i.e. ",(0,l.kt)("inlineCode",{parentName:"li"},"[]"),"), otherwise an error is raised."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_nested_unions")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then unions can contain other unions, otherwise an error is raised."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_duplicate_union_types")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then unions can contain multiple types that are forbidden from being in the same union by the spec."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_union_default_any_member")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then the default value for a union can match the schema of any member of the union, otherwise the default value must match the first member of the union."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_aliases_to_be_string"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then aliases can be specified as a string or a list\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),", then aliases must be specified as a list"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"coerce_values_to_int"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then values encoded in ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"long")," schemas will be coerced to ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," where possible"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"coerce_values_to_float"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then values encoded in ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"double")," schemas will be coerced to ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," where possible"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"coerce_int_to_float"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"double")," types will accept ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," values, and encode them as the closest floating-point value"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"coerce_values_to_boolean"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then values encoded in ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")," schemas will be coerced to ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," where possible"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"coerce_values_to_str"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then values encoded in ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," schemas will be coerced to ",(0,l.kt)("inlineCode",{parentName:"li"},"str")," where possible"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bytes_codec")," If not ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),", then values passed to bytes schemas will be encoded using the specified codec"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fixed_codec")," If not ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),", then values passed to fixed schemas will be encoded using the specified codec"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"null_pad_fixed")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then values encoded in ",(0,l.kt)("inlineCode",{parentName:"li"},"fixed")," schemas will be zero-padded to the specified size"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"truncate_fixed")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then values encoded in ",(0,l.kt)("inlineCode",{parentName:"li"},"fixed")," schemas will be truncated to the specified size (extra bytes will be dropped on encoding)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"clamp_int_overflow")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then values encoded in ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," schemas will be clamped to the min/max values for the specified size"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"clamp_float_overflow")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then values encoded in the ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," schema will be clamped to the min/max values 32-bit floats.  (Note, this also replaces INF/NaN values with the closest representable value unless ",(0,l.kt)("inlineCode",{parentName:"li"},"float_out_of_range_inf")," is `True)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"float_out_of_range_inf")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then values encoded in the ",(0,l.kt)("inlineCode",{parentName:"li"},"float")," schema that are out of range will be encoded as INF/NaN, otherwise an error is raised."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bytes_default_value_utf8")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then the default value for a bytes schema is encoded as UTF-8, otherwise it is encoded as latin1, this should probably never be used except for library compatibility reasons"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string_types_default_unchanged")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then default values for string/bytes/fixed schemas are passed back unmodified (may not be a string), otherwise the relevant JSON decoding is performed. this should probably never be used except for library compatibility reasons"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"decimal_check_exp_overflow")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then values encoded in the ",(0,l.kt)("inlineCode",{parentName:"li"},"decimal")," schema will be checked to ensure they are within the range of the specified precision/scale, otherwise an error is raised."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"types_str_to_schema")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then calling ",(0,l.kt)("inlineCode",{parentName:"li"},"str(\u2039schema instance\u203a)")," returns a JSON representation of the schema, otherwise the default ",(0,l.kt)("inlineCode",{parentName:"li"},"str")," implementation is used."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"logical_types"),"\nA tuple of logical types to use when parsing schemas, each item must be an instance of ",(0,l.kt)("inlineCode",{parentName:"li"},"LogicalType"),".",(0,l.kt)("br",{parentName:"li"}),"Typically this means that for custom logical types, you should subclass ",(0,l.kt)("inlineCode",{parentName:"li"},"cavro.CustomLogicalType"),"\nand implement ",(0,l.kt)("inlineCode",{parentName:"li"},"def custom_encode_value(value)")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"def custom_decode_value(value)"),".\nTo add types to this tuple, use the ",(0,l.kt)("inlineCode",{parentName:"li"},"with_logical_types")," method."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"adapt_record_types"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then when encoding records, if a record type is passed that has come from a different schema,\nthen the record type is adapted to the current schema, provided the name and fields match.\nThis situation can easily occur if a source schema is parsed twice.  Each instance of the schema will\nhave its own version of the Record class, and these are not compatible without this option."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"return_uuid_object")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then UUID values are returned as ",(0,l.kt)("inlineCode",{parentName:"li"},"uuid.UUID")," objects, otherwise they are returned as strings."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_error_type")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then the ",(0,l.kt)("inlineCode",{parentName:"li"},"error")," type is allowed in schemas (As an alias for 'record')."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_leading_dot_in_names")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then names can start with a dot, indicating the null namespace, otherwise an error is raised."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"naive_dt_assume_utc")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then naive datetime values are assumed to be in UTC, otherwise they are treated as representing local time (using current locale)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"alternate_timestamp_millis_encoding")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then an alternate approach to encoding timestamps is used that has slightly different behaviour at extreme values."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"date_type_accepts_string")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then the ",(0,l.kt)("inlineCode",{parentName:"li"},"date")," logical type will accept string in ISO8601 format as input (YYYY-MM-DD), otherwise an error is raised."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"raise_on_invalid_logical")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then attempts to parse a schema that contain invalid logical decimal paramters, will raise an error, rather than silently ignoring the logical type (as per spec)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"inline_namespaces")," If ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then when outputting schema JSON from a parsed schema, namespaces are inlined into the name, otherwise the namespace is output as a separate field."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expand_types_in_schema"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then when outputting schema JSON from a parsed schema, repeated types are output in full, rather than being referenced by name.\n",(0,l.kt)("strong",{parentName:"li"},"Note"),": This does not apply to nested/recursive types, which are always referenced by name to prevent infinite recursion."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"unicode_errors")," The error handling strategy to use when decoding strings/bytes.  See the ",(0,l.kt)("inlineCode",{parentName:"li"},"errors")," parameter to ",(0,l.kt)("inlineCode",{parentName:"li"},"str.decode")," for details."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"container_fill_blocks"),"\nIf ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", then when writing a container, records are written until the current block is \u203a ",(0,l.kt)("inlineCode",{parentName:"li"},"max_blocksize")," (I.e. blocks will often be larger than ",(0,l.kt)("inlineCode",{parentName:"li"},"max_blocksize"),")\nBy default, container writer will write a new block whenever the next record will take the current block over the ",(0,l.kt)("inlineCode",{parentName:"li"},"max_blocksize"),",\nmeaning that blocks will always be \u2039= ",(0,l.kt)("inlineCode",{parentName:"li"},"max_blocksize")," unless a single value is larger than ",(0,l.kt)("inlineCode",{parentName:"li"},"max_blocksize")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"defer_schema_promotion_errors"),(0,l.kt)("inlineCode",{parentName:"li"},"cavro")," performs eager promotion calculation for performance reasons, this means that incompatible reader/writer schemas are typically detected at schema parse time, and errors raised.\nFor compatibility purposes, setting this option to ",(0,l.kt)("inlineCode",{parentName:"li"},"True")," results in schema promotion errors being stored and raised when the first value is read."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"invalid_value_includes_record_name"),"\nWhen raising exceptions based on Invalid Values, the exception path includes the name of the record type, rather than just the field name."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"invalid_value_include_array_index"),"\nWhen raising exceptions based on Invalid Values, the exception path includes the array index of any arrays"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"invalid_value_include_map_key"),"\nWhen raising exceptions based on Invalid Values, the exception path includes the key of any maps in the value"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_invalid_default_values"),"\nTypically, default values must be valid JSON values for the schema, setting this option to ",(0,l.kt)("inlineCode",{parentName:"li"},"True")," allows invalid default values to be used (JSON decoding is still performed, but decode errors result in the raw value being used)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"externally_defined_types"),"\nAn immutable dict of named types (instances of ",(0,l.kt)("inlineCode",{parentName:"li"},"AvroType"),") that are defined outside of the schema being parsed.  This allows for custom/complex schema loading patterns where type definitions may be spread across multiple locations.\nFor example, if this dict has ",(0,l.kt)("inlineCode",{parentName:"li"},"{'Foo': \u2039RecordType...\u203a}"),", then a schema: ",(0,l.kt)("inlineCode",{parentName:"li"},'{"type": "Foo"}')," will be parsed to be the passed-in Foo type.\nTo add types to this dict, use the ",(0,l.kt)("inlineCode",{parentName:"li"},"with_external_types")," method.\n",(0,l.kt)("strong",{parentName:"li"},"Note"),": It's possible to end up with some weird situations including infinite recursion when using this option, as it's possible to create reference cycles between schemas resulting in infinite recursion errors.")),(0,l.kt)("h4",{id:"members-1"},"Members:"),(0,l.kt)("h5",{id:"init-optionsself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," Options(self, /, *args, **kwargs)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/option.pxi#L285",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-replaceself-changes--cavrooptions"},(0,l.kt)("span",{class:"api__item_class"},"method")," replace(self, **changes) \u2192 cavro.Options"),(0,l.kt)("p",null,"Return a copy of the options with the specified fields replaced.\nThis is a simple wrapper around ",(0,l.kt)("inlineCode",{parentName:"p"},"dataclasses.replace")),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/option.pxi#L292",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-with_logical_typesself-logical_types"},(0,l.kt)("span",{class:"api__item_class"},"method")," with_logical_types(self, *logical_types)"),(0,l.kt)("p",null,"Return a copy of the options with additional logical types added."),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/option.pxi#L299",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-with_external_typesself-named_types-dictstr-cavroavrotype--cavrooptions"},(0,l.kt)("span",{class:"api__item_class"},"method")," with_external_types(self, named_types: dict","[str, cavro.AvroType]",") \u2192 cavro.Options"),(0,l.kt)("p",null,"Return a copy of the options with pre-parsed external named types added\n(Allows for references to types in the schema that have not been defined in the schema)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/option.pxi#L323",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-equals-----self-----other-cavrooptions-----ignore-collectionsabcsequencestr-----bool"},(0,l.kt)("span",{class:"api__item_class"},"method")," equals(     self,     other: cavro.Options,     ignore: collections.abc.Sequence","[str]"," = () ) \u2192 bool"),(0,l.kt)("p",null,"Compares two Options objects, this is equivalent to\n",(0,l.kt)("inlineCode",{parentName:"p"},"self == other")," except you can pass in a list of field names to ignore"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/option.pxi#L339",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-diff-----self-----other-cavrooptions-----ignore-collectionsabcsequencestr-----dictstr-tupleobject-object"},(0,l.kt)("span",{class:"api__item_class"},"method")," diff(     self,     other: cavro.Options,     ignore: collections.abc.Sequence","[str]"," = () ) \u2192 dict[str, tuple","[object, object]","]"),(0,l.kt)("p",null,"Returns a dictionary containing just the fields that are different between two Options objects.\nAny fields whose names are in ",(0,l.kt)("inlineCode",{parentName:"p"},"ignore")," are not included.\nThe return dictionary is of the form: ",(0,l.kt)("inlineCode",{parentName:"p"},"{field_name: (self_value, other_value)}")),(0,l.kt)("h5",{id:"attr-name_pattern"},(0,l.kt)("span",{class:"api__item_class"},"attr")," name_pattern"),(0,l.kt)("p",null,"Returns the relevant regular expression for validating names based on the current options."),(0,l.kt)("h5",{id:"attr-fingerprint_returns_digest"},(0,l.kt)("span",{class:"api__item_class"},"attr")," fingerprint_returns_digest"),(0,l.kt)("h5",{id:"attr-canonical_form_repeat_fixed"},(0,l.kt)("span",{class:"api__item_class"},"attr")," canonical_form_repeat_fixed"),(0,l.kt)("h5",{id:"attr-canonical_form_repeat_enum"},(0,l.kt)("span",{class:"api__item_class"},"attr")," canonical_form_repeat_enum"),(0,l.kt)("h5",{id:"attr-record_can_encode_dict"},(0,l.kt)("span",{class:"api__item_class"},"attr")," record_can_encode_dict"),(0,l.kt)("h5",{id:"attr-record_values_type_hint"},(0,l.kt)("span",{class:"api__item_class"},"attr")," record_values_type_hint"),(0,l.kt)("h5",{id:"attr-record_decodes_to_dict"},(0,l.kt)("span",{class:"api__item_class"},"attr")," record_decodes_to_dict"),(0,l.kt)("h5",{id:"attr-record_allow_extra_fields"},(0,l.kt)("span",{class:"api__item_class"},"attr")," record_allow_extra_fields"),(0,l.kt)("h5",{id:"attr-record_encode_use_defaults"},(0,l.kt)("span",{class:"api__item_class"},"attr")," record_encode_use_defaults"),(0,l.kt)("h5",{id:"attr-allow_tuple_notation"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_tuple_notation"),(0,l.kt)("h5",{id:"attr-union_decodes_to"},(0,l.kt)("span",{class:"api__item_class"},"attr")," union_decodes_to"),(0,l.kt)("h5",{id:"attr-union_json_encodes_type_name"},(0,l.kt)("span",{class:"api__item_class"},"attr")," union_json_encodes_type_name"),(0,l.kt)("h5",{id:"attr-allow_primitive_name_collision"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_primitive_name_collision"),(0,l.kt)("h5",{id:"attr-allow_primitive_names_in_namespaces"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_primitive_names_in_namespaces"),(0,l.kt)("h5",{id:"attr-named_type_names_must_be_unique"},(0,l.kt)("span",{class:"api__item_class"},"attr")," named_type_names_must_be_unique"),(0,l.kt)("h5",{id:"attr-enum_symbols_must_be_unique"},(0,l.kt)("span",{class:"api__item_class"},"attr")," enum_symbols_must_be_unique"),(0,l.kt)("h5",{id:"attr-enforce_enum_symbol_name_rules"},(0,l.kt)("span",{class:"api__item_class"},"attr")," enforce_enum_symbol_name_rules"),(0,l.kt)("h5",{id:"attr-enforce_type_name_rules"},(0,l.kt)("span",{class:"api__item_class"},"attr")," enforce_type_name_rules"),(0,l.kt)("h5",{id:"attr-enforce_namespace_name_rules"},(0,l.kt)("span",{class:"api__item_class"},"attr")," enforce_namespace_name_rules"),(0,l.kt)("h5",{id:"attr-record_fields_must_be_unique"},(0,l.kt)("span",{class:"api__item_class"},"attr")," record_fields_must_be_unique"),(0,l.kt)("h5",{id:"attr-ascii_name_rules"},(0,l.kt)("span",{class:"api__item_class"},"attr")," ascii_name_rules"),(0,l.kt)("h5",{id:"attr-missing_values_can_be_null"},(0,l.kt)("span",{class:"api__item_class"},"attr")," missing_values_can_be_null"),(0,l.kt)("h5",{id:"attr-missing_values_can_be_empty_container"},(0,l.kt)("span",{class:"api__item_class"},"attr")," missing_values_can_be_empty_container"),(0,l.kt)("h5",{id:"attr-allow_false_values_for_null"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_false_values_for_null"),(0,l.kt)("h5",{id:"attr-allow_empty_unions"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_empty_unions"),(0,l.kt)("h5",{id:"attr-allow_nested_unions"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_nested_unions"),(0,l.kt)("h5",{id:"attr-allow_duplicate_union_types"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_duplicate_union_types"),(0,l.kt)("h5",{id:"attr-allow_union_default_any_member"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_union_default_any_member"),(0,l.kt)("h5",{id:"attr-allow_aliases_to_be_string"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_aliases_to_be_string"),(0,l.kt)("h5",{id:"attr-coerce_values_to_int"},(0,l.kt)("span",{class:"api__item_class"},"attr")," coerce_values_to_int"),(0,l.kt)("h5",{id:"attr-coerce_values_to_float"},(0,l.kt)("span",{class:"api__item_class"},"attr")," coerce_values_to_float"),(0,l.kt)("h5",{id:"attr-coerce_int_to_float"},(0,l.kt)("span",{class:"api__item_class"},"attr")," coerce_int_to_float"),(0,l.kt)("h5",{id:"attr-coerce_values_to_boolean"},(0,l.kt)("span",{class:"api__item_class"},"attr")," coerce_values_to_boolean"),(0,l.kt)("h5",{id:"attr-coerce_values_to_str"},(0,l.kt)("span",{class:"api__item_class"},"attr")," coerce_values_to_str"),(0,l.kt)("h5",{id:"attr-bytes_codec"},(0,l.kt)("span",{class:"api__item_class"},"attr")," bytes_codec"),(0,l.kt)("h5",{id:"attr-fixed_codec"},(0,l.kt)("span",{class:"api__item_class"},"attr")," fixed_codec"),(0,l.kt)("h5",{id:"attr-null_pad_fixed"},(0,l.kt)("span",{class:"api__item_class"},"attr")," null_pad_fixed"),(0,l.kt)("h5",{id:"attr-truncate_fixed"},(0,l.kt)("span",{class:"api__item_class"},"attr")," truncate_fixed"),(0,l.kt)("h5",{id:"attr-clamp_int_overflow"},(0,l.kt)("span",{class:"api__item_class"},"attr")," clamp_int_overflow"),(0,l.kt)("h5",{id:"attr-clamp_float_overflow"},(0,l.kt)("span",{class:"api__item_class"},"attr")," clamp_float_overflow"),(0,l.kt)("h5",{id:"attr-float_out_of_range_inf"},(0,l.kt)("span",{class:"api__item_class"},"attr")," float_out_of_range_inf"),(0,l.kt)("h5",{id:"attr-bytes_default_value_utf8"},(0,l.kt)("span",{class:"api__item_class"},"attr")," bytes_default_value_utf8"),(0,l.kt)("h5",{id:"attr-string_types_default_unchanged"},(0,l.kt)("span",{class:"api__item_class"},"attr")," string_types_default_unchanged"),(0,l.kt)("h5",{id:"attr-decimal_check_exp_overflow"},(0,l.kt)("span",{class:"api__item_class"},"attr")," decimal_check_exp_overflow"),(0,l.kt)("h5",{id:"attr-types_str_to_schema"},(0,l.kt)("span",{class:"api__item_class"},"attr")," types_str_to_schema"),(0,l.kt)("h5",{id:"attr-logical_types-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," logical_types"),(0,l.kt)("h5",{id:"attr-adapt_record_types"},(0,l.kt)("span",{class:"api__item_class"},"attr")," adapt_record_types"),(0,l.kt)("h5",{id:"attr-return_uuid_object"},(0,l.kt)("span",{class:"api__item_class"},"attr")," return_uuid_object"),(0,l.kt)("h5",{id:"attr-allow_error_type"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_error_type"),(0,l.kt)("h5",{id:"attr-allow_leading_dot_in_names"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_leading_dot_in_names"),(0,l.kt)("h5",{id:"attr-naive_dt_assume_utc"},(0,l.kt)("span",{class:"api__item_class"},"attr")," naive_dt_assume_utc"),(0,l.kt)("h5",{id:"attr-alternate_timestamp_millis_encoding"},(0,l.kt)("span",{class:"api__item_class"},"attr")," alternate_timestamp_millis_encoding"),(0,l.kt)("h5",{id:"attr-date_type_accepts_string"},(0,l.kt)("span",{class:"api__item_class"},"attr")," date_type_accepts_string"),(0,l.kt)("h5",{id:"attr-raise_on_invalid_logical"},(0,l.kt)("span",{class:"api__item_class"},"attr")," raise_on_invalid_logical"),(0,l.kt)("h5",{id:"attr-inline_namespaces"},(0,l.kt)("span",{class:"api__item_class"},"attr")," inline_namespaces"),(0,l.kt)("h5",{id:"attr-expand_types_in_schema"},(0,l.kt)("span",{class:"api__item_class"},"attr")," expand_types_in_schema"),(0,l.kt)("h5",{id:"attr-unicode_errors"},(0,l.kt)("span",{class:"api__item_class"},"attr")," unicode_errors"),(0,l.kt)("h5",{id:"attr-container_fill_blocks"},(0,l.kt)("span",{class:"api__item_class"},"attr")," container_fill_blocks"),(0,l.kt)("h5",{id:"attr-defer_schema_promotion_errors"},(0,l.kt)("span",{class:"api__item_class"},"attr")," defer_schema_promotion_errors"),(0,l.kt)("h5",{id:"attr-invalid_value_includes_record_name"},(0,l.kt)("span",{class:"api__item_class"},"attr")," invalid_value_includes_record_name"),(0,l.kt)("h5",{id:"attr-invalid_value_include_array_index"},(0,l.kt)("span",{class:"api__item_class"},"attr")," invalid_value_include_array_index"),(0,l.kt)("h5",{id:"attr-invalid_value_include_map_key"},(0,l.kt)("span",{class:"api__item_class"},"attr")," invalid_value_include_map_key"),(0,l.kt)("h5",{id:"attr-allow_invalid_default_values"},(0,l.kt)("span",{class:"api__item_class"},"attr")," allow_invalid_default_values"),(0,l.kt)("h5",{id:"attr-externally_defined_types"},(0,l.kt)("span",{class:"api__item_class"},"attr")," externally_defined_types"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-containerreader"},(0,l.kt)("span",{class:"api__item_class"},"class")," ContainerReader"),(0,l.kt)("p",null,"A class for reading avro object container files."),(0,l.kt)("p",null,"The container can ben used as an iterator, in which case it will yield the objects in the file in order:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"for obj in ContainerReader('file.avro'):\n    print(obj)\n")),(0,l.kt)("p",null,"Arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"src"),": The source to read from. Can be a file-like object, instance of ",(0,l.kt)("inlineCode",{parentName:"li"},"cavro.MemoryReader"),", or a path to a file (str|Path)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reader_schema"),": The schema to use when reading objects. If not provided, the writer schema will be used."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"options"),": An Options object to use when constructing the writer schema. Defaults to the default options. This does not affect the ",(0,l.kt)("inlineCode",{parentName:"li"},"reader_schema")," options.")),(0,l.kt)("h4",{id:"members-2"},"Members:"),(0,l.kt)("h5",{id:"init-containerreaderself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," ContainerReader(self, /, *args, **kwargs)"),(0,l.kt)("h5",{id:"attr-metadata"},(0,l.kt)("span",{class:"api__item_class"},"attr")," metadata"),(0,l.kt)("h5",{id:"attr-marker"},(0,l.kt)("span",{class:"api__item_class"},"attr")," marker"),(0,l.kt)("h5",{id:"attr-writer_schema"},(0,l.kt)("span",{class:"api__item_class"},"attr")," writer_schema"),(0,l.kt)("h5",{id:"attr-reader_schema"},(0,l.kt)("span",{class:"api__item_class"},"attr")," reader_schema"),(0,l.kt)("h5",{id:"attr-schema-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," schema"),(0,l.kt)("h5",{id:"attr-codec_name"},(0,l.kt)("span",{class:"api__item_class"},"attr")," codec_name"),(0,l.kt)("h5",{id:"attr-objects_left_in_block"},(0,l.kt)("span",{class:"api__item_class"},"attr")," objects_left_in_block"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/container.pxi#L117",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-next_objectself"},(0,l.kt)("span",{class:"api__item_class"},"method")," next_object(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-containerwriter"},(0,l.kt)("span",{class:"api__item_class"},"class")," ContainerWriter"),(0,l.kt)("p",null,"A class for writing avro object container files."),(0,l.kt)("p",null,"The writer can be used as a context manager, in which case it will be closed when the context exits:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"with ContainerWriter('file.avro', schema) as writer:\n    writer.write_one(obj)\n")),(0,l.kt)("p",null,"Arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dest"),": The destination to write to. Can be a file-like object, instance of ",(0,l.kt)("inlineCode",{parentName:"li"},"cavro.MemoryWriter"),", or a path to a file (str|Path)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"schema"),": The schema of the objects to be written."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"codec"),": The codec to use. Must be one of the supported codecs. Default to ",(0,l.kt)("inlineCode",{parentName:"li"},"null")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"max_blocksize"),": The maximum size of a block. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"16352"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"write_header"),": Whether to write the avro header to the file before writing blocks. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"metadata"),": A dictionary of metadata to write to the file. Defaults to an empty dictionary."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"marker"),": A 16-byte marker to use to separate blocks. Defaults to a random UUID."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"options"),": An Options object to use when writing. Defaults to the default options.")),(0,l.kt)("h4",{id:"members-3"},"Members:"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/container.pxi#L238",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-closeself"},(0,l.kt)("span",{class:"api__item_class"},"method")," close(self)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/container.pxi#L264",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-flushself-forcefalse"},(0,l.kt)("span",{class:"api__item_class"},"method")," flush(self, force=False)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/container.pxi#L284",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-write_manyself-objs"},(0,l.kt)("span",{class:"api__item_class"},"method")," write_many(self, objs)"),(0,l.kt)("h5",{id:"attr-closed"},(0,l.kt)("span",{class:"api__item_class"},"attr")," closed"),(0,l.kt)("h5",{id:"attr-schema-2"},(0,l.kt)("span",{class:"api__item_class"},"attr")," schema"),(0,l.kt)("h5",{id:"attr-codec"},(0,l.kt)("span",{class:"api__item_class"},"attr")," codec"),(0,l.kt)("h5",{id:"attr-marker-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," marker"),(0,l.kt)("h5",{id:"attr-max_blocksize"},(0,l.kt)("span",{class:"api__item_class"},"attr")," max_blocksize"),(0,l.kt)("h5",{id:"attr-options-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," options"),(0,l.kt)("h5",{id:"attr-should_write_header"},(0,l.kt)("span",{class:"api__item_class"},"attr")," should_write_header"),(0,l.kt)("h5",{id:"attr-num_pending"},(0,l.kt)("span",{class:"api__item_class"},"attr")," num_pending"),(0,l.kt)("h5",{id:"attr-blocks_written"},(0,l.kt)("span",{class:"api__item_class"},"attr")," blocks_written"),(0,l.kt)("h5",{id:"attr-metadata-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," metadata"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/container.pxi#L267",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-write_oneself-obj"},(0,l.kt)("span",{class:"api__item_class"},"method")," write_one(self, obj)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-filereader"},(0,l.kt)("span",{class:"api__item_class"},"class")," FileReader"),(0,l.kt)("p",null,"A cavro wrapper for reading data from a file-like object (Object that implements ",(0,l.kt)("inlineCode",{parentName:"p"},".read(n)"),")."),(0,l.kt)("p",null,"This class will not close or seek the underlying file object"),(0,l.kt)("p",null,"Arguments:\n",(0,l.kt)("inlineCode",{parentName:"p"},"file_obj"),": The file-like object to read from."),(0,l.kt)("h4",{id:"members-4"},"Members:"),(0,l.kt)("h5",{id:"init-filereaderself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," FileReader(self, /, *args, **kwargs)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-filewriter"},(0,l.kt)("span",{class:"api__item_class"},"class")," FileWriter"),(0,l.kt)("p",null,"A cavro wrapper for writing data to a file-like object (Object that implements ",(0,l.kt)("inlineCode",{parentName:"p"},".write(data)")," and ",(0,l.kt)("inlineCode",{parentName:"p"},".flush()"),")."),(0,l.kt)("p",null,"This class will not close or seek the underlying file object"),(0,l.kt)("h4",{id:"members-5"},"Members:"),(0,l.kt)("h5",{id:"init-filewriterself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," FileWriter(self, /, *args, **kwargs)"),(0,l.kt)("h2",{id:"other-classes"},"Other Classes"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-memorywriter"},(0,l.kt)("span",{class:"api__item_class"},"class")," MemoryWriter"),(0,l.kt)("p",null,"A class that writes to a memory buffer. The buffer is automatically resized to fit the data."),(0,l.kt)("p",null,"The underlying data is accessible through the ",(0,l.kt)("inlineCode",{parentName:"p"},"buffer")," attribute as an ",(0,l.kt)("inlineCode",{parentName:"p"},"array.array")," of bytes."),(0,l.kt)("h4",{id:"members-6"},"Members:"),(0,l.kt)("h5",{id:"attr-buffer"},(0,l.kt)("span",{class:"api__item_class"},"attr")," buffer"),(0,l.kt)("h5",{id:"attr-len"},(0,l.kt)("span",{class:"api__item_class"},"attr")," len"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-memoryreader"},(0,l.kt)("span",{class:"api__item_class"},"class")," MemoryReader"),(0,l.kt)("p",null,"A class that allows cavro to read binary data from a memory buffer."),(0,l.kt)("p",null,"Arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"data: The data to read from. Can be a ",(0,l.kt)("inlineCode",{parentName:"li"},"bytes")," object or a ",(0,l.kt)("inlineCode",{parentName:"li"},"memoryview"),".")),(0,l.kt)("h4",{id:"members-7"},"Members:"),(0,l.kt)("h5",{id:"init-memoryreaderself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," MemoryReader(self, /, *args, **kwargs)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-rabin"},(0,l.kt)("span",{class:"api__item_class"},"class")," Rabin"),(0,l.kt)("p",null,"An implementation of the 64-bit Rabin hash function  as described in the avro specification."),(0,l.kt)("p",null,"The interface in this class roughly approximates the ",(0,l.kt)("inlineCode",{parentName:"p"},"hashlib.hash")," objects."),(0,l.kt)("h4",{id:"members-8"},"Members:"),(0,l.kt)("h5",{id:"init-rabinself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," Rabin(self, /, *args, **kwargs)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/rabin.pxi#L52",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-digestself"},(0,l.kt)("span",{class:"api__item_class"},"method")," digest(self)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/rabin.pxi#L56",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-hexdigestself"},(0,l.kt)("span",{class:"api__item_class"},"method")," hexdigest(self)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/rabin.pxi#L59",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("h5",{id:"attr-value"},(0,l.kt)("span",{class:"api__item_class"},"attr")," value"),(0,l.kt)("h5",{id:"attr-name"},(0,l.kt)("span",{class:"api__item_class"},"attr")," name"),(0,l.kt)("h5",{id:"attr-digest_size"},(0,l.kt)("span",{class:"api__item_class"},"attr")," digest_size"),(0,l.kt)("h5",{id:"attr-block_size"},(0,l.kt)("span",{class:"api__item_class"},"attr")," block_size"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/rabin.pxi#L44",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-updateself-data"},(0,l.kt)("span",{class:"api__item_class"},"method")," update(self, data)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-record"},(0,l.kt)("span",{class:"api__item_class"},"class")," Record"),(0,l.kt)("p",null,"An instance of a record value from a schema.\nThis class should never be instantiated directly, instead it forms the base-class for ",(0,l.kt)("inlineCode",{parentName:"p"},"RecordType.record")," classes."),(0,l.kt)("p",null,"Field values can be accessed using dot notation, e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"record.field_name"),", index notation, e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"record['field_name']"),", or by calling ",(0,l.kt)("inlineCode",{parentName:"p"},"_asdict()"),"\nSubclasses of record have a class attribute: ",(0,l.kt)("inlineCode",{parentName:"p"},"Type"),", which is the ",(0,l.kt)("inlineCode",{parentName:"p"},"RecordType")," schema that the record was created from."),(0,l.kt)("p",null,"Internally, records are represented as a list of values, one for each field in the record, with associated field metadata.\nSubclasses can be instantiated in the following ways:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Record(data: list|tuple)"),": The length of data must match the number of fields in the record, and each value should correspond to the relevant field value"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Record(data: dict)"),": The keys of the dict must match the field names, and each value should correspond to the relevant field value"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Record(data: Record)"),": The record must be of the same type as the subclass, or must be adaptable to the subclass (Matching name and fields)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Record(**kwargs)"),": Each keyword argument should correspond to a field name, and the value should correspond to the relevant field value")),(0,l.kt)("h4",{id:"members-9"},"Members:"),(0,l.kt)("h5",{id:"init-recordself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," Record(self, /, *args, **kwargs)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-recordfield"},(0,l.kt)("span",{class:"api__item_class"},"class")," RecordField"),(0,l.kt)("p",null,"Holds the metadata for a record schema field.\nThis class should never be instantiated directly, instead it is created by ",(0,l.kt)("inlineCode",{parentName:"p"},"RecordType")," when parsing a schema."),(0,l.kt)("h4",{id:"members-10"},"Members:"),(0,l.kt)("h5",{id:"init-recordfieldself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," RecordField(self, /, *args, **kwargs)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/record.pxi#L244",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-get_schemaself-created"},(0,l.kt)("span",{class:"api__item_class"},"method")," get_schema(self, created)"),(0,l.kt)("h5",{id:"attr-name-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," name"),(0,l.kt)("h5",{id:"attr-writer_name"},(0,l.kt)("span",{class:"api__item_class"},"attr")," writer_name"),(0,l.kt)("h5",{id:"attr-doc"},(0,l.kt)("span",{class:"api__item_class"},"attr")," doc"),(0,l.kt)("h5",{id:"attr-type-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type"),(0,l.kt)("h5",{id:"attr-default_value"},(0,l.kt)("span",{class:"api__item_class"},"attr")," default_value"),(0,l.kt)("h5",{id:"attr-order"},(0,l.kt)("span",{class:"api__item_class"},"attr")," order"),(0,l.kt)("h5",{id:"attr-aliases"},(0,l.kt)("span",{class:"api__item_class"},"attr")," aliases"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-avrotype"},(0,l.kt)("span",{class:"api__item_class"},"class")," AvroType"),(0,l.kt)("p",null,"The base class for all Avro types.\n",(0,l.kt)("inlineCode",{parentName:"p"},"cavro")," separates the concept of a ",(0,l.kt)("inlineCode",{parentName:"p"},"Schema")," from a ",(0,l.kt)("inlineCode",{parentName:"p"},"Type"),", which is not strictly neccessary, but\nmakes some management of state a bit easier.\nHere, a ",(0,l.kt)("inlineCode",{parentName:"p"},"Type")," is the specific implementation of the data management, whereas a ",(0,l.kt)("inlineCode",{parentName:"p"},"Schema")," is the\npublic interface for a schema definition, typically (but not always) containing multiple types either in unions or in nested record fields."),(0,l.kt)("p",null,"For normal usage, the ",(0,l.kt)("inlineCode",{parentName:"p"},"AvroType")," class and subclasses can largely be ignored."),(0,l.kt)("h4",{id:"members-11"},"Members:"),(0,l.kt)("h5",{id:"init-avrotypeself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," AvroType(self, /, *args, **kwargs)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/type.pxi#L63",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-for_sourcecls-schema-source-namespacenone"},(0,l.kt)("span",{class:"api__item_class"},"method")," for_source(cls, schema, source, namespace=None)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/type.pxi#L84",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-for_schemacls-schema"},(0,l.kt)("span",{class:"api__item_class"},"method")," for_schema(cls, schema)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/type.pxi#L286",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-walk_typesself-visited"},(0,l.kt)("span",{class:"api__item_class"},"method")," walk_types(self, visited)"),(0,l.kt)("h5",{id:"attr-type-2"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type"),(0,l.kt)("h5",{id:"attr-options-2"},(0,l.kt)("span",{class:"api__item_class"},"attr")," options"),(0,l.kt)("h5",{id:"attr-metadata-2"},(0,l.kt)("span",{class:"api__item_class"},"attr")," metadata"),(0,l.kt)("h5",{id:"attr-value_adapters"},(0,l.kt)("span",{class:"api__item_class"},"attr")," value_adapters"),(0,l.kt)("h5",{id:"attr-type_name"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/type.pxi#L108",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-1"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/type.pxi#L134",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-convert_valueself-value-check_valuefalse"},(0,l.kt)("span",{class:"api__item_class"},"method")," convert_value(self, value, check_value=False)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/type.pxi#L292",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-get_schemaself-creatednone"},(0,l.kt)("span",{class:"api__item_class"},"method")," get_schema(self, created=None)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-uniontype"},(0,l.kt)("span",{class:"api__item_class"},"class")," UnionType"),(0,l.kt)("p",null,"The avro union type"),(0,l.kt)("h4",{id:"members-12"},"Members:"),(0,l.kt)("h5",{id:"init-uniontypeself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," UnionType(self, /, *args, **kwargs)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/union.pxi#L90",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-walk_typesself-visited-1"},(0,l.kt)("span",{class:"api__item_class"},"method")," walk_types(self, visited)"),(0,l.kt)("h5",{id:"attr-union_types"},(0,l.kt)("span",{class:"api__item_class"},"attr")," union_types"),(0,l.kt)("h5",{id:"attr-by_name_map"},(0,l.kt)("span",{class:"api__item_class"},"attr")," by_name_map"),(0,l.kt)("h5",{id:"attr-return_type_tuple"},(0,l.kt)("span",{class:"api__item_class"},"attr")," return_type_tuple"),(0,l.kt)("h5",{id:"attr-type_name-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/union.pxi#L77",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-2"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/union.pxi#L97",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-get_schemaself-creatednone-1"},(0,l.kt)("span",{class:"api__item_class"},"method")," get_schema(self, created=None)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/union.pxi#L170",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-convert_valueself-value-check_valuetrue"},(0,l.kt)("span",{class:"api__item_class"},"method")," convert_value(self, value, check_value=True)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-stringtype"},(0,l.kt)("span",{class:"api__item_class"},"class")," StringType"),(0,l.kt)("p",null,"The avro string type"),(0,l.kt)("h4",{id:"members-13"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-2"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/string_types.pxi#L97",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-3"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-bytestype"},(0,l.kt)("span",{class:"api__item_class"},"class")," BytesType"),(0,l.kt)("p",null,"The avro bytes type"),(0,l.kt)("h4",{id:"members-14"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-3"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/string_types.pxi#L7",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-4"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-doubletype"},(0,l.kt)("span",{class:"api__item_class"},"class")," DoubleType"),(0,l.kt)("p",null,"The avro double type."),(0,l.kt)("h4",{id:"members-15"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-4"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/numeric_types.pxi#L328",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-5"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-floattype"},(0,l.kt)("span",{class:"api__item_class"},"class")," FloatType"),(0,l.kt)("p",null,"The avro float type."),(0,l.kt)("h4",{id:"members-16"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-5"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/numeric_types.pxi#L213",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-6"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-longtype"},(0,l.kt)("span",{class:"api__item_class"},"class")," LongType"),(0,l.kt)("p",null,"The avro long type."),(0,l.kt)("h4",{id:"members-17"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-6"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/numeric_types.pxi#L137",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-7"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-inttype"},(0,l.kt)("span",{class:"api__item_class"},"class")," IntType"),(0,l.kt)("p",null,"The avro int type."),(0,l.kt)("h4",{id:"members-18"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-7"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/numeric_types.pxi#L65",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-8"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-booltype"},(0,l.kt)("span",{class:"api__item_class"},"class")," BoolType"),(0,l.kt)("p",null,"The avro boolean type."),(0,l.kt)("h4",{id:"members-19"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-8"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/numeric_types.pxi#L15",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-9"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-nulltype"},(0,l.kt)("span",{class:"api__item_class"},"class")," NullType"),(0,l.kt)("p",null,"The avro null type."),(0,l.kt)("h4",{id:"members-20"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-9"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/null.pxi#L6",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-10"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-maptype"},(0,l.kt)("span",{class:"api__item_class"},"class")," MapType"),(0,l.kt)("p",null,"The avro map type."),(0,l.kt)("h4",{id:"members-21"},"Members:"),(0,l.kt)("h5",{id:"init-maptypeself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," MapType(self, /, *args, **kwargs)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/map.pxi#L23",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-walk_typesself-visited-2"},(0,l.kt)("span",{class:"api__item_class"},"method")," walk_types(self, visited)"),(0,l.kt)("h5",{id:"attr-value_type"},(0,l.kt)("span",{class:"api__item_class"},"attr")," value_type"),(0,l.kt)("h5",{id:"attr-type_name-10"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/map.pxi#L14",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-11"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/map.pxi#L122",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-convert_valueself-orig_value-check_valuetrue"},(0,l.kt)("span",{class:"api__item_class"},"method")," convert_value(self, orig_value, check_value=True)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-arraytype"},(0,l.kt)("span",{class:"api__item_class"},"class")," ArrayType"),(0,l.kt)("p",null,"The avro array type."),(0,l.kt)("h4",{id:"members-22"},"Members:"),(0,l.kt)("h5",{id:"init-arraytypeself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," ArrayType(self, /, *args, **kwargs)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/array.pxi#L23",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-walk_typesself-visited-3"},(0,l.kt)("span",{class:"api__item_class"},"method")," walk_types(self, visited)"),(0,l.kt)("h5",{id:"attr-item_type"},(0,l.kt)("span",{class:"api__item_class"},"attr")," item_type"),(0,l.kt)("h5",{id:"attr-type_name-11"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/array.pxi#L15",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-12"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/array.pxi#L92",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-convert_valueself-value-check_valuetrue-1"},(0,l.kt)("span",{class:"api__item_class"},"method")," convert_value(self, value, check_value=True)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-fixedtype"},(0,l.kt)("span",{class:"api__item_class"},"class")," FixedType"),(0,l.kt)("p",null,"The avro fixed type"),(0,l.kt)("h4",{id:"members-23"},"Members:"),(0,l.kt)("h5",{id:"init-fixedtypeself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," FixedType(self, /, *args, **kwargs)"),(0,l.kt)("h5",{id:"attr-size"},(0,l.kt)("span",{class:"api__item_class"},"attr")," size"),(0,l.kt)("h5",{id:"attr-type_name-12"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/string_types.pxi#L163",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-13"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-recordtype"},(0,l.kt)("span",{class:"api__item_class"},"class")," RecordType"),(0,l.kt)("p",null,"The Type that corresponds to a Record in a Schema."),(0,l.kt)("p",null,"Attributes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"doc"),' Any "doc" metadata defined in the schema'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fields")," A tuple of ",(0,l.kt)("inlineCode",{parentName:"li"},"RecordField")," instances, one for each field in the record"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"record")," A subclass of ",(0,l.kt)("inlineCode",{parentName:"li"},"Record")," that can be used to instantiate records of this type")),(0,l.kt)("h4",{id:"members-24"},"Members:"),(0,l.kt)("h5",{id:"init-recordtypeself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," RecordType(self, /, *args, **kwargs)"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/record.pxi#L366",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-walk_typesself-visited-4"},(0,l.kt)("span",{class:"api__item_class"},"method")," walk_types(self, visited)"),(0,l.kt)("h5",{id:"attr-doc-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," doc"),(0,l.kt)("h5",{id:"attr-fields"},(0,l.kt)("span",{class:"api__item_class"},"attr")," fields"),(0,l.kt)("h5",{id:"attr-record"},(0,l.kt)("span",{class:"api__item_class"},"attr")," record"),(0,l.kt)("h5",{id:"attr-type_name-13"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/record.pxi#L348",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-14"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-promotingrecordtype"},(0,l.kt)("span",{class:"api__item_class"},"class")," PromotingRecordType"),(0,l.kt)("p",null,"A variant of a ",(0,l.kt)("inlineCode",{parentName:"p"},"RecordType"),", specialized for reading records from a different schema from a writer."),(0,l.kt)("h4",{id:"members-25"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-enumtype"},(0,l.kt)("span",{class:"api__item_class"},"class")," EnumType"),(0,l.kt)("p",null,"The avro enum type"),(0,l.kt)("h4",{id:"members-26"},"Members:"),(0,l.kt)("h5",{id:"init-enumtypeself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," EnumType(self, /, *args, **kwargs)"),(0,l.kt)("h5",{id:"attr-symbols"},(0,l.kt)("span",{class:"api__item_class"},"attr")," symbols"),(0,l.kt)("h5",{id:"attr-default_value-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," default_value"),(0,l.kt)("h5",{id:"attr-doc-2"},(0,l.kt)("span",{class:"api__item_class"},"attr")," doc"),(0,l.kt)("h5",{id:"attr-type_name-14"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/enum.pxi#L47",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"method-copyself-15"},(0,l.kt)("span",{class:"api__item_class"},"method")," copy(self)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-promotingenumtype"},(0,l.kt)("span",{class:"api__item_class"},"class")," PromotingEnumType"),(0,l.kt)("p",null,"The avro enum type"),(0,l.kt)("h4",{id:"members-27"},"Members:"),(0,l.kt)("h5",{id:"attr-unknown_symbols"},(0,l.kt)("span",{class:"api__item_class"},"attr")," unknown_symbols"),(0,l.kt)("h5",{id:"attr-reader_type"},(0,l.kt)("span",{class:"api__item_class"},"attr")," reader_type"),(0,l.kt)("h5",{id:"attr-writer_type"},(0,l.kt)("span",{class:"api__item_class"},"attr")," writer_type"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-resolvedschema"},(0,l.kt)("span",{class:"api__item_class"},"class")," ResolvedSchema"),(0,l.kt)("p",null,"A variant of a schema that is the result of schema promotion."),(0,l.kt)("h4",{id:"members-28"},"Members:"),(0,l.kt)("h5",{id:"init-resolvedschemaself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," ResolvedSchema(self, /, *args, **kwargs)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-valueadapter"},(0,l.kt)("span",{class:"api__item_class"},"class")," ValueAdapter"),(0,l.kt)("p",null,"Abstract base class for any helper that affects how values are transformed prior to avro encoding/decoding."),(0,l.kt)("h4",{id:"members-29"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-logicaltype"},(0,l.kt)("span",{class:"api__item_class"},"class")," LogicalType"),(0,l.kt)("p",null,"Semi-abstract class for all logical types."),(0,l.kt)("p",null,"Subclasses must be implemented as cython classes."),(0,l.kt)("h4",{id:"members-30"},"Members:"),(0,l.kt)("h5",{id:"method-for_typeunknown"},(0,l.kt)("span",{class:"api__item_class"},"method")," for_type(unknown)"),(0,l.kt)("h5",{id:"attr-logical_name"},(0,l.kt)("span",{class:"api__item_class"},"attr")," logical_name"),(0,l.kt)("h5",{id:"attr-underlying_types"},(0,l.kt)("span",{class:"api__item_class"},"attr")," underlying_types"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-customlogicaltype"},(0,l.kt)("span",{class:"api__item_class"},"class")," CustomLogicalType"),(0,l.kt)("p",null,"Logical type that allows custom encoding/decoding functions to be provided."),(0,l.kt)("p",null,"To use a custom logical type, subclass this class, and implement the:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"encode_value(value: object) \u2192 object")," - Transforms a provided value into something that can be encoded by the underlying type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"decode_value(value: object) \u2192 object")," - Transforms a value decoded by the underlying type into a value to return to the user.\nmethods.")),(0,l.kt)("p",null,"Also implement two class attributes, and a classmethod:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"logical_name")," - The name to look for in the schema"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"underlying_types")," A tuple of ",(0,l.kt)("inlineCode",{parentName:"li"},"AvtoType")," classes that this logical type can be applied to."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_for_type(cls, underlying: AvroType) \u2192 Cls"),"\nA classmethod that returns an instance of the class, optionally customized with information from the underlying type,\nor None if the logical type is not applicable to the underlying type.")),(0,l.kt)("h4",{id:"members-31"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-decimaltype"},(0,l.kt)("span",{class:"api__item_class"},"class")," DecimalType"),(0,l.kt)("p",null,"Logical type for decimal values."),(0,l.kt)("h4",{id:"members-32"},"Members:"),(0,l.kt)("h5",{id:"init-decimaltypeself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," DecimalType(self, /, *args, **kwargs)"),(0,l.kt)("h5",{id:"attr-type_name-15"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("h5",{id:"attr-precision"},(0,l.kt)("span",{class:"api__item_class"},"attr")," precision"),(0,l.kt)("h5",{id:"attr-scale"},(0,l.kt)("span",{class:"api__item_class"},"attr")," scale"),(0,l.kt)("h5",{id:"attr-scale_val"},(0,l.kt)("span",{class:"api__item_class"},"attr")," scale_val"),(0,l.kt)("h5",{id:"attr-context"},(0,l.kt)("span",{class:"api__item_class"},"attr")," context"),(0,l.kt)("h5",{id:"attr-size-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," size"),(0,l.kt)("h5",{id:"attr-check_exp_overflow"},(0,l.kt)("span",{class:"api__item_class"},"attr")," check_exp_overflow"),(0,l.kt)("h5",{id:"attr-logical_name-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," logical_name"),(0,l.kt)("h5",{id:"attr-underlying_types-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," underlying_types"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-uuidbase"},(0,l.kt)("span",{class:"api__item_class"},"class")," UUIDBase"),(0,l.kt)("p",null,"Logical type for UUID values"),(0,l.kt)("h4",{id:"members-33"},"Members:"),(0,l.kt)("h5",{id:"init-uuidbaseself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," UUIDBase(self, /, *args, **kwargs)"),(0,l.kt)("h5",{id:"attr-logical_name-2"},(0,l.kt)("span",{class:"api__item_class"},"attr")," logical_name"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-uuidstringtype"},(0,l.kt)("span",{class:"api__item_class"},"class")," UUIDStringType"),(0,l.kt)("p",null,"Logical type for UUID values"),(0,l.kt)("h4",{id:"members-34"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-16"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("h5",{id:"attr-underlying_types-2"},(0,l.kt)("span",{class:"api__item_class"},"attr")," underlying_types"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-uuidfixedtype"},(0,l.kt)("span",{class:"api__item_class"},"class")," UUIDFixedType"),(0,l.kt)("p",null,"Logical type for UUID values"),(0,l.kt)("h4",{id:"members-35"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-17"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("h5",{id:"attr-underlying_types-3"},(0,l.kt)("span",{class:"api__item_class"},"attr")," underlying_types"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-date"},(0,l.kt)("span",{class:"api__item_class"},"class")," Date"),(0,l.kt)("p",null,"Logical type for Date values"),(0,l.kt)("h4",{id:"members-36"},"Members:"),(0,l.kt)("h5",{id:"init-dateself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," Date(self, /, *args, **kwargs)"),(0,l.kt)("h5",{id:"attr-type_name-18"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("h5",{id:"attr-accepts_string"},(0,l.kt)("span",{class:"api__item_class"},"attr")," accepts_string"),(0,l.kt)("h5",{id:"attr-logical_name-3"},(0,l.kt)("span",{class:"api__item_class"},"attr")," logical_name"),(0,l.kt)("h5",{id:"attr-underlying_types-4"},(0,l.kt)("span",{class:"api__item_class"},"attr")," underlying_types"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-timemillis"},(0,l.kt)("span",{class:"api__item_class"},"class")," TimeMillis"),(0,l.kt)("p",null,"Logical type for time-millis values"),(0,l.kt)("h4",{id:"members-37"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-19"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("h5",{id:"attr-logical_name-4"},(0,l.kt)("span",{class:"api__item_class"},"attr")," logical_name"),(0,l.kt)("h5",{id:"attr-underlying_types-5"},(0,l.kt)("span",{class:"api__item_class"},"attr")," underlying_types"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-timemicros"},(0,l.kt)("span",{class:"api__item_class"},"class")," TimeMicros"),(0,l.kt)("p",null,"Logical type for time-micros values"),(0,l.kt)("h4",{id:"members-38"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-20"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("h5",{id:"attr-logical_name-5"},(0,l.kt)("span",{class:"api__item_class"},"attr")," logical_name"),(0,l.kt)("h5",{id:"attr-underlying_types-6"},(0,l.kt)("span",{class:"api__item_class"},"attr")," underlying_types"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-timestampmillis"},(0,l.kt)("span",{class:"api__item_class"},"class")," TimestampMillis"),(0,l.kt)("p",null,"Logical type for timestamp-micros values"),(0,l.kt)("h4",{id:"members-39"},"Members:"),(0,l.kt)("h5",{id:"init-timestampmillisself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," TimestampMillis(self, /, *args, **kwargs)"),(0,l.kt)("h5",{id:"attr-type_name-21"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("h5",{id:"attr-alternate_timestamp_encoding"},(0,l.kt)("span",{class:"api__item_class"},"attr")," alternate_timestamp_encoding"),(0,l.kt)("h5",{id:"attr-logical_name-6"},(0,l.kt)("span",{class:"api__item_class"},"attr")," logical_name"),(0,l.kt)("h5",{id:"attr-underlying_types-7"},(0,l.kt)("span",{class:"api__item_class"},"attr")," underlying_types"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-timestampmicros"},(0,l.kt)("span",{class:"api__item_class"},"class")," TimestampMicros"),(0,l.kt)("p",null,"Logical type for timestamp-micros values"),(0,l.kt)("h4",{id:"members-40"},"Members:"),(0,l.kt)("h5",{id:"attr-type_name-22"},(0,l.kt)("span",{class:"api__item_class"},"attr")," type_name"),(0,l.kt)("h5",{id:"attr-logical_name-7"},(0,l.kt)("span",{class:"api__item_class"},"attr")," logical_name"),(0,l.kt)("h5",{id:"attr-underlying_types-8"},(0,l.kt)("span",{class:"api__item_class"},"attr")," underlying_types"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-codec"},(0,l.kt)("span",{class:"api__item_class"},"class")," Codec"),(0,l.kt)("p",null,"Abstract base class for all codecs.  This class is not meant to be used directly."),(0,l.kt)("p",null,"Subclasses must be implemented in cython."),(0,l.kt)("h4",{id:"members-41"},"Members:"),(0,l.kt)("h5",{id:"attr-name-2"},(0,l.kt)("span",{class:"api__item_class"},"attr")," name"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-promotetofloat"},(0,l.kt)("span",{class:"api__item_class"},"class")," PromoteToFloat"),(0,l.kt)("p",null,"A value adapter that converts a value to a float on read."),(0,l.kt)("h4",{id:"members-42"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-promotebytestostring"},(0,l.kt)("span",{class:"api__item_class"},"class")," PromoteBytesToString"),(0,l.kt)("p",null,"A value adapter that decodes bytes to a string (utf8) on read."),(0,l.kt)("h4",{id:"members-43"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-promotestringtobytes"},(0,l.kt)("span",{class:"api__item_class"},"class")," PromoteStringToBytes"),(0,l.kt)("p",null,"A value adapter that encodes a string to bytes (utf8) on read."),(0,l.kt)("h4",{id:"members-44"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-cannotpromote"},(0,l.kt)("span",{class:"api__item_class"},"class")," CannotPromote"),(0,l.kt)("p",null,"A captured schema promotion error that has been deferred by ",(0,l.kt)("inlineCode",{parentName:"p"},"Options"),", the first time this value is read, the error will be raised."),(0,l.kt)("h4",{id:"members-45"},"Members:"),(0,l.kt)("h5",{id:"init-cannotpromoteself--args-kwargs"},(0,l.kt)("span",{class:"api__item_class"},"init")," CannotPromote(self, /, *args, **kwargs)"),(0,l.kt)("h5",{id:"attr-reader_type-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," reader_type"),(0,l.kt)("h5",{id:"attr-writer_type-1"},(0,l.kt)("span",{class:"api__item_class"},"attr")," writer_type"),(0,l.kt)("h5",{id:"attr-extra"},(0,l.kt)("span",{class:"api__item_class"},"attr")," extra"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-cavroexception"},(0,l.kt)("span",{class:"api__item_class"},"class")," CavroException"),(0,l.kt)("p",null,"Base class for exceptions raised by cavro"),(0,l.kt)("h4",{id:"members-46"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-invalidname"},(0,l.kt)("span",{class:"api__item_class"},"class")," InvalidName"),(0,l.kt)("p",null,"The schema contains a type or enum symbol with an invalid name (as per the avro specification)"),(0,l.kt)("h4",{id:"members-47"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-unknowntype"},(0,l.kt)("span",{class:"api__item_class"},"class")," UnknownType"),(0,l.kt)("p",null,"The schema contains an unexptected type name (either a missing named-type definition, or invalid primitive type)"),(0,l.kt)("h4",{id:"members-48"},"Members:"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/error.pxi#L20",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"init-unknowntypeself-name"},(0,l.kt)("span",{class:"api__item_class"},"init")," UnknownType(self, name)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-duplicatename"},(0,l.kt)("span",{class:"api__item_class"},"class")," DuplicateName"),(0,l.kt)("p",null,"A record contains multiple fields with the same name, a schema contains multiple types of the same name, or an enum has multiple identical symbols."),(0,l.kt)("h4",{id:"members-49"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-invalidhasher"},(0,l.kt)("span",{class:"api__item_class"},"class")," InvalidHasher"),(0,l.kt)("p",null,"An unknown hash method was requested"),(0,l.kt)("h4",{id:"members-50"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-exponenttoolarge"},(0,l.kt)("span",{class:"api__item_class"},"class")," ExponentTooLarge"),(0,l.kt)("p",null,"The exponent of a decimal value is too large to be represented in the given type"),(0,l.kt)("h4",{id:"members-51"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-codecunavailable"},(0,l.kt)("span",{class:"api__item_class"},"class")," CodecUnavailable"),(0,l.kt)("p",null,"A requested codec (or codec in a container) is not available or is unknown."),(0,l.kt)("h4",{id:"members-52"},"Members:"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-cannotpromoteerror"},(0,l.kt)("span",{class:"api__item_class"},"class")," CannotPromoteError"),(0,l.kt)("p",null,"A schema cannot be promoted to another schema. (reader/writer schema promotion)"),(0,l.kt)("p",null,"Attributes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reader_type"),": The schema type of the reader"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"writer_type"),": The schema type of the writer"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"extra"),": An optional extra message")),(0,l.kt)("h4",{id:"members-53"},"Members:"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/error.pxi#L61",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"init-cannotpromoteerrorself-reader_type-writer_type-extranone"},(0,l.kt)("span",{class:"api__item_class"},"init")," CannotPromoteError(self, reader_type, writer_type, extra=None)"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-invalidvalue"},(0,l.kt)("span",{class:"api__item_class"},"class")," InvalidValue"),(0,l.kt)("p",null,"A value is invalid for a given avro type."),(0,l.kt)("p",null,"Attributes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value"),": The value that caused the error"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dest_type"),": The schema type that the value was being converted to"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"schema_path"),": A sequence of identifiers (field names etc) to help locate the value that caused the error")),(0,l.kt)("h4",{id:"members-54"},"Members:"),(0,l.kt)("div",null,(0,l.kt)("a",{style:{float:"right"},href:"https://github.com/stestagg/cavro/blob/v0.3.7/src/error.pxi#L82",target:"_blank"},"[source]")),(0,l.kt)("h5",{id:"init-invalidvalueself-value-dest_type-path"},(0,l.kt)("span",{class:"api__item_class"},"init")," InvalidValue(self, value, dest_type, path=())"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-uniondecodeoption"},(0,l.kt)("span",{class:"api__item_class"},"class")," UnionDecodeOption"),(0,l.kt)("p",null,"Controls how union values are decoded:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"RAW_VALUES - The value of the matching union type is returned unmodified"),(0,l.kt)("li",{parentName:"ul"},"TYPE_TUPLE_IF_AMBIGUOUS - If union contains types that might be ambiguous (Record + Map) or (String + Enum), then the value is returned as a 2-tuple of (\u2039type\u203a, \u2039value\u203a)"),(0,l.kt)("li",{parentName:"ul"},"TYPE_TUPLE_IF_RECORD_AMBIGUOUS - If union contains multiple record (or map) types, then the value is returned as a 2-tuple of (\u2039type\u203a, \u2039value\u203a)"),(0,l.kt)("li",{parentName:"ul"},"TYPE_TUPLE_IF_RECORD - values matching any union member that is record are returned as a 2-tuple of (\u2039type\u203a, \u2039value\u203a)"),(0,l.kt)("li",{parentName:"ul"},"TYPE_TUPLE_ALWAYS - values are always returned as a 2-tuple of (\u2039type\u203a, \u2039value\u203a)")),(0,l.kt)("h4",{id:"members-55"},"Members:"),(0,l.kt)("h5",{id:"attr-raw_values"},(0,l.kt)("span",{class:"api__item_class"},"attr")," RAW_VALUES"),(0,l.kt)("h5",{id:"attr-type_tuple_if_ambiguous"},(0,l.kt)("span",{class:"api__item_class"},"attr")," TYPE_TUPLE_IF_AMBIGUOUS"),(0,l.kt)("h5",{id:"attr-type_tuple_if_record_ambiguous"},(0,l.kt)("span",{class:"api__item_class"},"attr")," TYPE_TUPLE_IF_RECORD_AMBIGUOUS"),(0,l.kt)("h5",{id:"attr-type_tuple_if_record"},(0,l.kt)("span",{class:"api__item_class"},"attr")," TYPE_TUPLE_IF_RECORD"),(0,l.kt)("h5",{id:"attr-type_tuple_always"},(0,l.kt)("span",{class:"api__item_class"},"attr")," TYPE_TUPLE_ALWAYS"),(0,l.kt)("div",{class:"api__sep"}),(0,l.kt)("h3",{id:"class-order"},(0,l.kt)("span",{class:"api__item_class"},"class")," Order"),(0,l.kt)("p",null,"The order of a field in a record."),(0,l.kt)("h4",{id:"members-56"},"Members:"),(0,l.kt)("h5",{id:"attr-asc"},(0,l.kt)("span",{class:"api__item_class"},"attr")," ASC"),(0,l.kt)("h5",{id:"attr-desc"},(0,l.kt)("span",{class:"api__item_class"},"attr")," DESC"),(0,l.kt)("h5",{id:"attr-ignore"},(0,l.kt)("span",{class:"api__item_class"},"attr")," IGNORE"))}m.isMDXComponent=!0}}]);