"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[581],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>y});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(a),m=l,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return a?n.createElement(y,r(r({ref:t},c),{},{components:a})):n.createElement(y,r({ref:t},c))}));function y(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=a.length,r=new Array(o);r[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9536:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));const o={},r="Logical Types",i={unversionedId:"user-guide/logical-types",id:"user-guide/logical-types",title:"Logical Types",description:"cavro supports a number of standard avro logical types by default:",source:"@site/docs/user-guide/logical-types.md",sourceDirName:"user-guide",slug:"/user-guide/logical-types",permalink:"/docs/user-guide/logical-types",draft:!1,editUrl:"https://github.com/stestagg/cavro/tree/main/doc/docs/user-guide/logical-types.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"1 Minute Introduction to cavro",permalink:"/docs/user-guide/intro"},next:{title:"Options",permalink:"/docs/user-guide/options"}},s={},p=[{value:"Disabling all logical types",id:"disabling-all-logical-types",level:2},{value:"Custom Logical Types",id:"custom-logical-types",level:2},{value:"Schema Parameters for Custom Types",id:"schema-parameters-for-custom-types",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,l.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"logical-types"},"Logical Types"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cavro")," supports a number of standard avro logical types by default:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for logical_type in cavro.DEFAULT_OPTIONS.logical_types:\n    name = logical_type.logical_name\n    underlying_types = logical_type.underlying_types\n    underlying_names = [ut.type_name for ut in underlying_types]\n    print(f' * {name} ({\", \".join(underlying_names)})')\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," * decimal (bytes, fixed)\n * uuid (string)\n * uuid (fixed)\n * date (int)\n * time-millis (int)\n * time-micros (long)\n * timestamp-millis (long)\n * timestamp-micros (long)\n")),(0,l.kt)("p",null,"Internally, these are implemented as value adapters on the schema type.  Value adapters are primarily used for logical types, but also play a part in schema promotion, and effectively are hooks that can change values before being encoded, or after being decoded."),(0,l.kt)("p",null,"Normally you shouldn't need to worry about value adapters, but understanding this may make the examples below clearer.  A normal schema with no logical types has no value adapters:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"cavro.Schema({'type': 'int'}).type.value_adapters\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"()\n")),(0,l.kt)("p",null,"If a valid logical type spec is found, then this is included as a value adapter:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"cavro.Schema({'type': 'int', 'logicalType': 'time-millis'}).type.value_adapters\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"(<cavro.TimeMillis at 0x1124175d0>,)\n")),(0,l.kt)("h2",{id:"disabling-all-logical-types"},"Disabling all logical types"),(0,l.kt)("p",null,"To disable logical types, set the logical_types option to be an empty list:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"cavro.Schema({'type': 'int', 'logicalType': 'time-millis'}, logical_types=()).type.value_adapters\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"()\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"my_options = cavro.DEFAULT_OPTIONS.replace(logical_types=())\ncavro.Schema({'type': 'int', 'logicalType': 'time-millis'}, options=my_options).type.value_adapters\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"()\n")),(0,l.kt)("h1",{id:"selectively-enabling-logical-types"},"Selectively enabling logical types"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"cavro.Schema({'type': 'int', 'logicalType': 'time-millis'}, logical_types=(cavro.TimeMillis, )).type.value_adapters\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"(<cavro.TimeMillis at 0x112416910>,)\n")),(0,l.kt)("h2",{id:"custom-logical-types"},"Custom Logical Types"),(0,l.kt)("p",null,"Custom logical types are implemented as subclasses of ",(0,l.kt)("a",{parentName:"p",href:"/docs/api#class-CustomLogicalType"},"cavro.CustomLogicalType"),"."),(0,l.kt)("p",null,"They can be added to the list of types in options by using ",(0,l.kt)("a",{parentName:"p",href:"/docs/api#method-with_logical_typesself-logical_types"},"Options.with_logical_types")),(0,l.kt)("p",null,"Subclasses should be defined like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Times10Type(cavro.CustomLogicalType):\n    logical_name = 'times-10'                            # The name that is used in the avro schema\n    underlying_types = (cavro.IntType, cavro.LongType)   # A tuple of classes of the avro types that this type can be attached to\n\n    @classmethod\n    def _for_type(cls, underlying):\n        return cls()\n    \n    def custom_encode_value(self, value):                 # This is called to prepare a value for avro encoding\n        return value * 10\n    \n    def custom_decode_value(self, value):               # This is called after a value has been decoded\n        return value // 10\n")),(0,l.kt)("p",null,"Add the class to the options, and encode/decode a value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"my_options = cavro.DEFAULT_OPTIONS.with_logical_types(Times10Type)\nschema = cavro.Schema({'type': 'int', 'logicalType': 'times-10'}, options=my_options)\n\nencoded = schema.binary_encode(314)\nprint(encoded)\nprint(schema.binary_decode(encoded))\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"b'\\x881'\n314\n")),(0,l.kt)("p",null,"Decoding the encoded value using a normal schema, it's clear that the stored value is 10x larger:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"plain_schema = cavro.Schema({'type': 'int'})\nplain_schema.binary_decode(encoded)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"3140\n")),(0,l.kt)("h3",{id:"schema-parameters-for-custom-types"},"Schema Parameters for Custom Types"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"_for_type")," classmethod allows for a logical type to be customized based on values in the schema."),(0,l.kt)("p",null,"Let's create a new version of the logical type where the stored value can be multiplied by any value (not just 10):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class TimesNType(cavro.CustomLogicalType):\n    logical_name = 'times-n'  \n    underlying_types = (cavro.IntType, cavro.LongType)\n\n    def __init__(self, n):\n        self.n = n   # Store the 'N' value (the number to multiply by)\n\n    @classmethod\n    def _for_type(cls, underlying: cavro.AvroType):\n        # underlying.metadata is a dictionary of values in the schema that aren't part of the type definition\n        n_value = underlying.metadata.get('n', 10)\n        # The avro spec says that invalid logical types must be ignored, so return None here to signal that:\n        if not isinstance(n_value, int):\n            return None\n        return cls(n_value)\n    \n    def custom_encode_value(self, value):                 # This is called to prepare a value for avro encoding\n        return value * self.n\n    \n    def custom_decode_value(self, value):               # This is called after a value has been decoded\n        return value // self.n\n    \nmy_options = cavro.DEFAULT_OPTIONS.with_logical_types(TimesNType)\n")),(0,l.kt)("p",null,"Now, we can specify how much to multiple values by:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"n1_schema = cavro.Schema({'type': 'int', 'logicalType': 'times-n', 'n': 1}, options=my_options)\nn2_schema = cavro.Schema({'type': 'int', 'logicalType': 'times-n', 'n': 2}, options=my_options)\nn10_schema = cavro.Schema({'type': 'int', 'logicalType': 'times-n', 'n': 10}, options=my_options)\n")),(0,l.kt)("p",null,"If we encode the same number with each of these schemas, and then decode them with our plain schema above, it's clear that the encoded values are different:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"print(plain_schema.binary_decode(n1_schema.binary_encode(10)))\nprint(plain_schema.binary_decode(n2_schema.binary_encode(10)))\nprint(plain_schema.binary_decode(n10_schema.binary_encode(10)))\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"10\n20\n100\n")))}d.isMDXComponent=!0}}]);