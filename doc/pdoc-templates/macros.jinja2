{% macro docstring(var) %}
{% if var.docstring %}
{{ var.docstring | to_markdown | replace('<', '&lt;') |safe}}
{% endif %}
{% endmacro %}


{% macro class(cls) %}
### `class` {{ cls.qualname }}
{{ docstring(cls) }}
#### Members:
{% for m in cls.own_members %}
{{ member(m) }}
{% endfor %}
{% endmacro %}

{% macro function(func) %}
{% set name = func.name %}
{% set ty = 'method' %}
{% if func.name == '__init__' %}
{% set name = func.taken_from[1].split('.')[0] %}
{% set ty = 'init' %}
{% endif %}
{% if func.obj.func_code %}
<div>
<a style={{ '{{' }}float: 'right'}} href="{{edit_url_map['cavro']}}{{ func.obj.func_code.co_filename }}#L{{ func.obj.func_code.co_firstlineno }}" target="_blank">[source]</a>
</div>
{% endif %}

##### `{{ty}}` {{ name }}{{ func.signature }}

{{ docstring(func) | to_markdown | replace('<', '&lt;') |safe }}
{% endmacro %}

{% macro submodule(mod) %}
{% endmacro %}

{% macro variable(v) %}
##### `attr` {{ v.name }}
{{ docstring(v) }}
{% endmacro %}

{% macro member(doc) %}
{% if is_public(doc)|trim %}
{%- if doc.kind == "class" %}
{{- class(doc) }}
{% elif doc.kind == "function" %}
{{ function(doc) }}
{% elif doc.kind == "module" %}
{{ submodule(doc) }}
{% elif doc.kind == "variable" %}
{{ variable(doc) }}
{% else %}
UNKONWN KIND: {{ doc.kind }}
{% endif %}
{% endif %}
{% endmacro %}

{% macro is_public(doc) %}
    {#
    This macro is a bit unconventional in that its output is not rendered, but treated as a boolean:
    Returning no text is interpreted as false, returning any other text is iterpreted as true.
    Implementing this as a macro makes it very easy to override with a custom template, see
    https://github.com/mitmproxy/pdoc/tree/main/examples/custom-template.
    #}
    {% if not include_undocumented and not doc.docstring %}
        {# hide members that are undocumented if include_undocumented has been toggled off. #}
    {% elif doc.docstring and "@private" in doc.docstring %}
        {# hide members explicitly marked as @private #}
    {% elif doc.name == "__init__" and (doc.docstring or (doc.kind == "function" and doc.signature_without_self.parameters)) %}
        {# show constructors that have a docstring or at least one extra argument #}
        true
    {% elif doc.name == "__doc__" %}
        {# We don't want to document __doc__ itself, https://github.com/mitmproxy/pdoc/issues/235 #}
    {% elif doc.kind == "variable" and doc.is_typevar and not doc.docstring %}
        {# do not document TypeVars, that only clutters the docs. #}
    {% elif doc.kind == "module" and doc.fullname not in all_modules %}
        {# Skip modules that were manually excluded, https://github.com/mitmproxy/pdoc/issues/334 #}
    {% elif (doc.qualname or doc.name) is in(module.obj.__all__ or []) %}
        {# members starting with an underscore are still public if mentioned in __all__ #}
        true
    {% elif not doc.name.startswith("_") %}
        {# members not starting with an underscore are considered public by default #}
        true
    {% endif %}
{% endmacro %}
{% block content %}
{% endblock %}